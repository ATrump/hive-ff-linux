#!/usr/bin/env bash

if [[ -z $RIG_CONF ]]; then #reread env variables as after upgrade this can be empty
	source /etc/environment
	export $(cat /etc/environment | grep -vE '^$|^#' | cut -d= -f1) #export all variables from file
fi

. colors

export DISPLAY=":0"

#AUTOFAN_LOG="/var/log/hive-autofan.log"

#Must be empty in release
DEBUG_COMMANDS=

#MIN_COEF=80
#MAX_COEF=100
#SLEEP_TIME=20
DEF_SLEEP_TIME=15


#######################################################################
#settings (for autofan.conf without DEF_), default values
#target GPU temperature
DEF_TARGET_TEMP=
#minimal fan speed
DEF_MIN_FAN=30
#maximum fan speed
DEF_MAX_FAN=100
#temperature to stop miner
DEF_CRITICAL_TEMP=90
#action on reaching critical temp. "" to stop mining, reboot, shutdown
DEF_CRITICAL_TEMP_ACTION=
#AMD fan control (AMD control enable-0/AMD control disable-1)
DEF_NO_AMD=0
#Reboot rig if GPU error (enable-1/disable-0)
DEF_REBOOT_ON_ERROR=0
#Speed for switch to autocontrol
DEF_AUTO_SPEED=25
#######################################################################



#we will restart miner only it was stopped by this script
miner_stopped_by_overheat=0
#flag that the message was sent
unable_to_set_fan_speed=0
#flag if we met 511, 460, etc
temperature_is_unreal=0
#unparsable data
error_in_temp_readings=0


###
# Log write
function echo2 {
	#echo -e "$1" > /dev/tty1
	#echo -e "$1" >> $AUTOFAN_LOG
	echo -e "$1"
}


#check $GPU_DETECT_JSON and do nothing while not exist
while true; do 
	if [ -f $GPU_DETECT_JSON ]; then
		gpu_detect_json=`cat $GPU_DETECT_JSON`
		all_card_number=`echo "$gpu_detect_json" | jq ". | length"`

		# TODO this block must be refactored to library functions
		amd_indexes_query='[ . | to_entries[] | select(.value.brand == "amd") | .key ]'
		amd_indexes_array=`echo "$gpu_detect_json" | jq -r "$amd_indexes_query | .[]"`
		amd_cards_number=`echo "$gpu_detect_json" | jq -c "$amd_indexes_query | length"`

		nvidia_indexes_query='[ . | to_entries[] | select(.value.brand == "nvidia") | .key ]'
		nvidia_indexes_array=`echo "$gpu_detect_json" | jq -r "$nvidia_indexes_query| .[]"`
		nvidia_cards_number=`echo "$gpu_detect_json" | jq -c "$nvidia_indexes_query | length"`

		declare -a fan_count_array=(`echo "$gpu_detect_json" | jq -r '. | to_entries[] | select(.value) | .value.fan_cnt'`)
		
		declare -a min_fan_array
		declare -a prev_fan_array
		declare -a prev_set_array
		declare -a pprev_set_array
		
		for (( i=0; i < $all_card_number; i++ ))
		do
			min_fan_array[$i]=0
			prev_fan_array[$i]=100
			prev_set_array[$i]=1000
			pprev_set_array[$i]=-1000
		done

		# TODO cpus maybe required to use autofans too
		#cpu_indexes_query='[ . | to_entries[] | select(.value.brand == "cpu") | .key ]'
		#cpu_indexes_array=`echo "$gpu_detect_json" | jq -r "$cpu_indexes_query"`
		#cpu_cores_number=`echo "$gpu_detect_json" | jq -c "$cpu_indexes_query | length"`
		declare -a card_bus_ids_array=(`echo "$gpu_detect_json" | jq -r '[ . | to_entries[] | select(.value) | .value.busid ] | .[]'`)
		# TODO There is must be the way to remove space or use the whole value inside the quotes
		#declare -a card_names_array=(`echo "$gpu_detect_json" | jq '[ . | to_entries[] | select(.value) | .value.name ] | .[]'`)
		
		#set AMD $cardnum array
		if [[ $amd_cards_number > 0 ]]; then
			cardnum=()
			for j in ${amd_indexes_array[@]}
			do
				#get bus_id amd gpu
				cardnum_bus_id=${card_bus_ids_array[j]}
				dirs=`ls -d1 /sys/class/drm/card*/device/pp_table | sort --version-sort` #natural sort for 10+ cards
				[[ -z $dirs ]] && break
				for dir in $dirs; do
					basedir=${dir%/*} #cut off /pp_table
					busid_dirs=`cat $basedir/uevent | grep PCI_SLOT_NAME | awk -F= '{print substr($2,6)}'`
					if [[ $busid_dirs == $cardnum_bus_id ]]; then
						[[ $dir =~ \/card([0-9a-z]+)\/ ]]
						cardnum[$j]=${BASH_REMATCH[1]}
					fi
				done
			done
		fi
		break
	else
		echo2 "${RED}No $GPU_DETECT_JSON file exist${NOCOLOR}"
	fi
	sleep 10
done


check_gpu () {
	if [[ $nvidia_indexes_array == '[]' && $amd_indexes_array == '[]' ]]; then
		echo2 "No ${RED}AMD${NOCOLOR} or ${GREEN}NVIDIA${NOCOLOR} cards detected"
		exit 1
	fi

	[[ $nvidia_cards_number > 0 ]] &&
		echo2 "You have ${GREEN}NVIDIA${NOCOLOR} GPU's: $nvidia_cards_number" #&&
#	nvidia-smi -pm 1 > /dev/null 2>&1 && nvidia-settings -a GPUPowerMizerMode=1 > /dev/null 2>&1 #Useless and unnecessary command

	[[ $amd_cards_number > 0 ]] &&
		echo2 "You have ${RED}AMD${NOCOLOR} GPU's: $amd_cards_number"

	#check config
	if [ ! -f $AUTOFAN_CONF ]; then
		echo2 "${RED}No config $AUTOFAN_CONF${NOCOLOR}"
	fi
}



get_fan_speed () {
	local cur_temp=$1
	local prev_temp=$2
	local cur_fan_speed=$3
	local gpu_bus_id=$4
	local i=$5
	local min_fan=$7
	local prev_fan=$8
	local pprev_fan=$9
	#checking var is natural number
	if [[ -z "${cur_temp##*[!0-9]*}" || -z "${cur_fan_speed##*[!0-9]*}" ]]; then
		if [[ $REBOOT_ON_ERROR == 1 ]]; then
			local msg="Autofan: error in temp readings, rebooting"
			local payload=`cat $GPU_STATS_JSON | jq -r -C .`
			echo "$payload" | message warning "$msg" payload
			nohup bash -c 'sreboot' > /tmp/nohup.log 2>&1 &
		else
			if [[ $error_in_temp_readings == 0 ]]; then
				local msg="Autofan: error in temp readings"
				local payload=`cat $GPU_STATS_JSON | jq -r -C .`
				echo "$payload" | message warning "$msg" payload
				error_in_temp_readings=1
			fi
		fi
	fi


#	echo_temp="${CYAN}$cur_temp°C${NOCOLOR}"
	target_fan_speed=$cur_fan_speed

	#check current temp and set fan speed
	if [[ ! -z $prev_temp && $prev_temp != 0 ]]; then
			chg_temp=$(( $cur_temp - $prev_temp ))
			[[ $chg_temp -ge 0 && $cur_temp -gt $HIGH_TEMP  ]] && target_fan_speed=$(( $cur_fan_speed + 2 ))
			[[ $chg_temp -gt 2 ]] && target_fan_speed=$(( $cur_fan_speed + $(( $(( $MAX_FAN - $cur_fan_speed )) / 10 )) ))
			[[ $chg_temp -le 0 && $cur_temp -lt $LOW_TEMP ]] && target_fan_speed=$(( $cur_fan_speed - 1 ))
			[[ $chg_temp -lt -2 && $cur_temp -lt $LOW_TEMP ]] && target_fan_speed=$(( $cur_fan_speed - $(( $(( $cur_fan_speed - $MIN_FAN )) / 5 )) ))
		
	fi
	
#	echo "GPU"$i $chg_temp $cur_fan_speed $target_fan_speed
	if [[ $cur_temp -ge $VERY_HIGH_TEMP && $cur_fan_speed -lt $(( $VERY_HIGH_FAN - 2 ))  ]]; then
		target_fan_speed=$VERY_HIGH_FAN
#		echo_temp="${RED}$cur_temp°C${NOCOLOR}"
	fi
	
	
	if [[ $cur_temp -lt $LOW_TEMP ]]; then
		echo_temp="${BLUE}$cur_temp°C${NOCOLOR}"
	elif [[ $cur_temp -gt $HIGH_TEMP ]]; then
		echo_temp="${RED}$cur_temp°C${NOCOLOR}"
	else
		echo_temp="${CYAN}$cur_temp°C${NOCOLOR}"
	fi

	if [[ $6 == "Nvidia" && ! -z $prev_fan && ! -z $pprev_fan ]]; then
		if [[ $cur_temp -le $HIGH_TEMP && $cur_temp -le $prev_temp ]]; then 
				#[[ $cur_fan_speed -gt $prev_fan ]] && target_fan_speed=$(( $target_fan_speed - 1 ))
				[[ $target_fan_speed -lt 0 ]] && target_fan_speed=0
				
				[[ $cur_fan_speed -gt $prev_fan && $cur_fan_speed -gt $pprev_fan && $cur_fan_speed -lt $AUTO_SPEED ]] && target_fan_speed=0
				#[[ $gpu_fan_speed -eq 0 || ${prev_set_array[index]} -eq 0 ]] && target_fan_speed=0
		fi
	fi
	
	#set MIN_FAN & MAX_FAN speed if needed
	[[ $MIN_FAN -eq 1 ]] && MIN_FAN=0
	
	[[ $target_fan_speed -lt $MIN_FAN ]] && target_fan_speed=$MIN_FAN
	if [[ ! -z $min_fan ]]; then
		[[ $target_fan_speed -lt $min_fan ]] && target_fan_speed=$min_fan
	fi
	[[ $target_fan_speed -lt 0 ]] && target_fan_speed=0

	[[ $target_fan_speed -gt $MAX_FAN ]] && target_fan_speed=$MAX_FAN
		#Just to make sure
	[[ $target_fan_speed -gt 100 ]] && target_fan_speed=100
	if [[ $6 == "Nvidia" ]]; then
		[[ $target_fan_speed -gt 99 ]] && target_fan_speed=99
		[[ $target_fan_speed -gt $cur_fan_speed && $target_fan_speed -lt $AUTO_SPEED ]] && target_fan_speed=$AUTO_SPEED
	fi
	
	#echo "GPU "$i $cur_fan_speed $(( $cur_fan_speed + $(( $(( $MAX_FAN - $cur_fan_speed )) / 10 )) )) $min_fan $AUTO_SPEED
	
	#if GPU disabled
	[[ -z $cur_temp ]] && target_fan_speed=$MAX_FAN


	### Output after all modifications of target_fan_speed
	
	echo_fan="$target_fan_speed%"
	[[ $target_fan_speed -gt $cur_fan_speed ]] &&
		echo_fan="${YELLOW}$target_fan_speed% ↑${NOCOLOR}"
	[[ $target_fan_speed -lt $cur_fan_speed ]] &&
		echo_fan="${GREEN}$target_fan_speed% ↓${NOCOLOR}"
	[[ $target_fan_speed -eq $MAX_FAN ]] &&
		echo_fan="${RED}$target_fan_speed%${NOCOLOR}"

	echo_cur_fan="$cur_fan_speed%"
	
	[[ $6 == "Nvidia" ]] &&
		gpu_info+="GPU $i ${GREEN}$6${NOCOLOR} [${gpu_bus_id}]: $echo_temp $echo_cur_fan $echo_fan" ||
		gpu_info+="GPU $i ${RED}$6   ${NOCOLOR} [${gpu_bus_id}]: $echo_temp $echo_cur_fan $echo_fan"

	gpu_info+="\n"

}


###
# What we must to do if temperature reached some limits
check_overheat() {
	if [[ $miner_stopped_by_overheat == 1 && ! `screen -ls | grep "miner"` ]]; then
#	if [[ true ]]; then
		local t
		local allisok=1
		local resume_temp=$(( CRITICAL_TEMP - 20 ))
		# resume at least at target temp+1
		[[ $resume_temp -lt $(( TARGET_TEMP + 1 )) ]] && resume_temp=$(( TARGET_TEMP + 1 ))
		for t in ${temperatures_array[@]}; do
			if [[ $t -gt $resume_temp ]]; then
			#cold enough to start miner again
				allisok=0
				break
			fi
		done
		if [[ $allisok == 1 ]]; then
			miner_stopped_by_overheat=0 #let's forget about this
			do_miner_action "miner-start"
			local msg="GPU cooled down, mining resumed"
			message ok "$msg"
			#echo2 "${GREEN}$msg${NOCOLOR}"
		fi
	elif [[ $miner_stopped_by_overheat == 0 ]]; then
		local t
		for t in ${temperatures_array[@]}; do
			#reboot on driver error
			if [[ $t -gt 120 ]]; then
				if [[ $REBOOT_ON_ERROR == 1 ]]; then
					local msg="Autofan: GPU temperature $t is unreal, driver error, rebooting"
					local payload=`cat $GPU_STATS_JSON | jq -r -C .`
					echo "$payload" | message warning "$msg" payload
					nohup bash -c 'sreboot' > /tmp/nohup.log 2>&1 &
				else
					if [[ $temperature_is_unreal == 0 ]]; then
						local msg="Autofan: GPU temperature $t is unreal, driver error"
						local payload=`cat $GPU_STATS_JSON | jq -r -C .`
						echo "$payload" | message warning "$msg" payload
						temperature_is_unreal=1
					fi
				fi
				break
			fi

			#stop on CRITICAL_TEMP
			if [[ $t -ge $CRITICAL_TEMP && $t -le 120 ]]; then #do not process temp 511, 460, etc
				miner_stopped_by_overheat=1
				do_miner_action "miner-stop"

				local msg="GPU reached ${CRITICAL_TEMP}°C"
				if [[ $CRITICAL_TEMP_ACTION == "reboot" ]]; then
					msg+=", rebooting"
				elif [[ $CRITICAL_TEMP_ACTION == "shutdown" ]]; then
					msg+=", shutting down"
				else
					msg+=", mining stopped"
				fi
				local payload=`cat $GPU_STATS_JSON | jq -r -C .`
				echo "$payload" | message warning "$msg" payload

				if [[ $CRITICAL_TEMP_ACTION == "reboot" ]]; then
					nohup bash -c 'sreboot' > /tmp/nohup.log 2>&1 &
				elif [[ $CRITICAL_TEMP_ACTION == "shutdown" ]]; then
					nohup bash -c 'sreboot shutdown' > /tmp/nohup.log 2>&1 &
				fi

				break
			fi
		done
	fi
}


do_miner_action() {
	case $1 in
		"miner-start")
			if [[ ! `screen -ls | grep "miner"` ]]; then
				miner start
				#echo2 "${GREEN}Miner started${NOCOLOR}"
			fi

			if [[ -f $RIG_CONF ]]; then
				. $RIG_CONF
				[[ $WD_ENABLED==1 ]] &&
					wd start
			fi
		;;

		"miner-stop")
			if [[ `screen -ls | grep "miner"` ]]; then
				miner stop
				wd stop
				#echo2 "${RED}Miner stopped${NOCOLOR}"
			fi
		;;
	esac
}



# TODO merge with amd_auto_fan_control
nvidia_auto_fan_control () {
	args=
	#set start index
	local fan_idx=0
	local gpu_idx=0
	for index in ${nvidia_indexes_array[@]}; do
		# TODO Theese fields maybe moved inside `get_fan_speed` replaced by on nvidia_indexes_array[@] as argument
		local gpu_temperature=${temperatures_array[index]}
		local gpu_temperature_previous=${temperatures_array_previous[index]}
		[[ -z $gpu_temperature_previous ]] && gpu_temperature_previous=0
		local gpu_fan_speed=${fans_array[index]}
		local card_bus_id=${card_bus_ids_array[index]}
		local brand="Nvidia"
		local fan_count=${fan_count_array[index]}
		[[ -z $fan_count || $fan_count == "null" ]] && fan_count=1
		#event_by_temperature $gpu_temperature
		#echo "get_fan_speed \"$gpu_temperature\" \"$gpu_temperature_previous\" \"$gpu_fan_speed\" \"$card_bus_id\" $gpu_idx $brand"
		get_fan_speed "$gpu_temperature" "$gpu_temperature_previous" "$gpu_fan_speed" "$card_bus_id" $index $brand ${min_fan_array[index]} ${prev_set_array[index]} ${pprev_set_array[index]}
		
		[[ $gpu_fan_speed -gt ${min_fan_array[index]}  || $gpu_fan_speed -eq 0 ]] && min_fan_array[index]=0
		
		
		#not set fan_speed if not changed
		#echo "GPU"$gpu_idx $gpu_fan_speed $target_fan_speed ${prev_set_array[index]} ${pprev_set_array[index]}
		if [[ -n $target_fan_speed && $target_fan_speed -ne $gpu_fan_speed ]]; then
			#if [[ $target_fan_speed -lt $gpu_fan_speed && $target_fan_speed -ne 0 && $target_fan_speed -lt $AUTO_SPEED ]]; then
			#	args+=" -a [gpu:$gpu_idx]/GPUFanControlState=0"
			#	echo "GPU"$gpu_idx "set to auto"
			#else
				args+=" -a [gpu:$gpu_idx]/GPUFanControlState=1"
				for (( i = $fan_idx; i < $(( $fan_idx+$fan_count )); i++ )); do
					args+=" -a [fan:$i]/GPUTargetFanSpeed=$target_fan_speed"
				done
				[[ $gpu_fan_speed -gt $target_fan_speed && $target_fan_speed -eq ${prev_set_array[index]} && $target_fan_speed -eq ${pprev_set_array[index]} && $target_fan_speed -lt $(( $MAX_FAN - 10 )) ]] && min_fan_array[index]=$gpu_fan_speed
				
			#fi
		fi
		#echo "gpu $gpu_idx, fan $fan_idx, count $fan_count, index $index"
		pprev_set_array[index]=${prev_set_array[index]}
		prev_set_array[index]=$target_fan_speed
		gpu_idx=$(( $gpu_idx+1 ))
		fan_idx=$(( $fan_idx+$fan_count ))
		prev_fan_array[index]=$gpu_fan_speed
		
		
	done
	#[[ -n $args ]] && nvidia-settings $args > /dev/null 2>&1
	if [[ -n $args ]]; then
		[[ $DEBUG_COMMANDS == 1 ]] && echo "nvidia-settings $args"
		nvs=`timeout -s9 60 nvidia-settings $args 2>&1`
		if [[ $? -ne 0 ]]; then
			if [[ $REBOOT_ON_ERROR == 1 ]]; then
				echo "$nvs" | message warning "Autofan: unable to set fan speed, rebooting" payload
				nohup bash -c 'sreboot' > /tmp/nohup.log 2>&1 &
			else
				if [[ $unable_to_set_fan_speed == 0 ]]; then
					echo "$nvs" | message warning "Autofan: unable to set fan speed" payload
				fi
			fi
			unable_to_set_fan_speed=1
		fi
	fi
}



amd_auto_fan_control () {
	for index in ${amd_indexes_array[@]}; do
		# TODO Theese fields maybe moved inside `get_fan_speed` replaced by on amd_indexes_array[@] as argument
		local gpu_temperature=${temperatures_array[index]}
		local gpu_temperature_previous=${temperatures_array_previous[index]}
		[[ -z $gpu_temperature_previous ]] && gpu_temperature_previous=0
		local gpu_fan_speed=${fans_array[index]}
		local card_bus_id=${card_bus_ids_array[index]}
		local brand="AMD   "
		#event_by_temperature $gpu_temperature
		get_fan_speed "$gpu_temperature" "$gpu_temperature_previous" "$gpu_fan_speed" "$card_bus_id" $index $brand
		if [[ $target_fan_speed -gt $gpu_fan_speed ]]; then
			for (( i=0; i <= 10; i++ ))
			do
				wolfamdctrl -i ${cardnum[index]} --set-fanspeed $(( $target_fan_speed + $i )) 1>/dev/null
				[[ $(wolfamdctrl -i ${cardnum[index]} --show-fanspeed | tr -d %) -ge $target_fan_speed ]] && break
			done
		fi
		if [[ $target_fan_speed -lt $gpu_fan_speed && $target_fan_speed -lt $MAX_FAN ]]; then
			for (( i=0; i <= 10; i++ ))
			do
				wolfamdctrl -i ${cardnum[index]} --set-fanspeed $(( $target_fan_speed - $i )) 1>/dev/null
				[[ $(wolfamdctrl -i ${cardnum[index]} --show-fanspeed | tr -d %) -le $target_fan_speed ]] && break
			done
		fi
	done
}


auto_fan_control() {
	while true;	do
		unset ENABLED
		TARGET_TEMP= #unset tt if it's not in config anymore
		CRITICAL_TEMP=
		CRITICAL_TEMP_ACTION=
		MIN_FAN=
		MAX_FAN=
		NO_AMD=
		REBOOT_ON_ERROR=
		VERY_HIGH_TEMP=
		VERY_HIGH_FAN=
		AUTO_SPEED=
		READ_COUNT=0
		
		[[ -f $AUTOFAN_CONF ]] && source $AUTOFAN_CONF

		#set default values
		[[ -z $TARGET_TEMP ]] && TARGET_TEMP=$DEF_TARGET_TEMP
		HIGH_TEMP=$(( $TARGET_TEMP + 1 ))
		LOW_TEMP=$(( $TARGET_TEMP - 1 ))
		[[ -z $CRITICAL_TEMP ]] && CRITICAL_TEMP=$DEF_CRITICAL_TEMP
		[[ -z $CRITICAL_TEMP_ACTION ]] && CRITICAL_TEMP_ACTION=$DEF_CRITICAL_TEMP_ACTION
		[[ -z $MIN_FAN ]] && MIN_FAN=$DEF_MIN_FAN
		[[ -z $MAX_FAN ]] && MAX_FAN=$DEF_MAX_FAN
		[[ -z $NO_AMD ]] && NO_AMD=$DEF_NO_AMD
		[[ -z $REBOOT_ON_ERROR ]] && REBOOT_ON_ERROR=$DEF_REBOOT_ON_ERROR
		[[ -z $VERY_HIGH_TEMP ]] && VERY_HIGH_TEMP=$(( $TARGET_TEMP + 6 ))
		[[ $VERY_HIGH_TEMP -gt $CRITICAL_TEMP ]] && VERY_HIGH_TEMP=$CRITICAL_TEMP
		[[ -z $VERY_HIGH_FAN ]] && VERY_HIGH_FAN=$(( $MAX_FAN - 10 ))
		[[ -z $AUTO_SPEED ]] && AUTO_SPEED=$DEF_AUTO_SPEED
				
		SLEEP_TIME=$DEF_SLEEP_TIME
		
		
		
		#fallback for old configurations without ENABLED in config
		[[ ! -v ENABLED && ! -z $TARGET_TEMP ]] && ENABLED=1 #if ENABLED var is not in config


		echo2 "${GREEN}$(date +"%Y-%m-%d %T")${NOCOLOR}"


		#trying to read data 10 times
		for read_count in {1..10}; do
			declare -a temperatures_array=(`cat $GPU_STATS_JSON | tail -1 | jq -r ".temp | .[]"`)
			#echo ${temperatures_array[@]}
			[[ -n $temperatures_array ]] && break
			echo2 "${RED}Can't get temperature data from gpu-stats ($read_count)${NOCOLOR}"
			if [[ $read_count -ne 10 ]]; then
				echo2 "${YELLOW}Waiting 5 seconds and will try one more time...${NOCOLOR}"
				read -t 5
			fi
		done

		#reboot if temperatures_array is empty
		if [[ -z $temperatures_array || $temperatures_array == 'null' ]]; then
			if [[ $REBOOT_ON_ERROR == 1 ]]; then
				local msg="GPU driver error, no temps, rebooting"
				local payload=`cat $GPU_STATS_JSON | jq -r -C .`
				echo "$payload" | message err "$msg" payload
				nohup bash -c 'sreboot' > /tmp/nohup.log 2>&1 &
			else
				if [[ $error_in_temp_readings == 0 ]]; then
					local msg="GPU driver error, no temps"
					local payload=`cat $GPU_STATS_JSON | jq -r -C .`
					echo "$payload" | message warning "$msg" payload
				fi
			fi
			error_in_temp_readings=1
			read -t $SLEEP_TIME
			continue
		fi

	
		#miner_stop will work
		check_overheat


		### waiting for the miner to work and if the miner does not work, wait for it a bit
#		khs=
#		for i in {1..12}; do #wait 60 seconds for miner then continue and wait again on next loop
#			[[ -f $HASHRATE_KHS ]] && khs=$(cat $HASHRATE_KHS)
#			[[ ! -z $khs && $khs != 0 ]] && break
#			echo2 "${YELLOW}Waiting for the miner to start hashing${NOCOLOR}"
#			read -t 5
#		done


		#check if the .conf file exists
		if [[ -n $TARGET_TEMP && -f $AUTOFAN_CONF && -f $GPU_STATS_JSON ]]; then
			#MIN_TEMP=$(( TARGET_TEMP-5 ))

			if [[ $PREV_TARGET_TEMP != $TARGET_TEMP ||
				$PREV_CRITICAL_TEMP != $CRITICAL_TEMP || $PREV_CRITICAL_TEMP_ACTION != $CRITICAL_TEMP_ACTION ||
				$PREV_MIN_FAN != $MIN_FAN || $PREV_MAX_FAN != $MAX_FAN ]];
			then
				echo2 "${PURPLE}Target temp $TARGET_TEMP°C, Miner stop at $CRITICAL_TEMP°C, Min Fan $MIN_FAN%, Max Fan $MAX_FAN%${NOCOLOR}"
				PREV_TARGET_TEMP=$TARGET_TEMP
				PREV_CRITICAL_TEMP=$CRITICAL_TEMP
				PREV_CRITICAL_TEMP_ACTION=$CRITICAL_TEMP_ACTION
				PREV_MIN_FAN=$MIN_FAN
				PREV_MAX_FAN=$MAX_FAN
			fi

			declare -a fans_array=(`cat $GPU_STATS_JSON | tail -1 | jq -r ".fan | .[]"`)
			[[ $DEBUG_COMMANDS == 1 ]] && echo "Fans: ${fans_array[@]}"
			gpu_info=

			if (( $nvidia_cards_number > 0 )); then
				nvidia_auto_fan_control
			fi

			if [[ $amd_cards_number > 0 && $NO_AMD != 1 ]]; then #AMD control is not disabled
				amd_auto_fan_control
			fi

			echo2 "$gpu_info"
			declare -a temperatures_array_previous=(${temperatures_array[@]})
		fi

		old_modify=$(stat --printf %Y $GPU_STATS_JSON)
		#sleep $SLEEP_TIME
		#echo "SLEEP_TIME=$SLEEP_TIME"
		while (( $old_modify == $(stat --printf %Y $GPU_STATS_JSON) )); do
			sleep 1
		done
#		read -t $SLEEP_TIME
	done
}


function start() {
	session_count=`screen -ls autofan | grep autofan | wc -l`
	if [[ $session_count > 0 ]]; then
		echo -e "${RED}Autofan screen is already running${NOCOLOR}"
		echo -e "Run ${CYAN}autofan${NOCOLOR} or ${CYAN}screen -r autofan${NOCOLOR} to resume screen"
		return
	fi
	screen -dm -S autofan $0 loop
	echo2 "Autofan screen started"
}


function stop() {
	screens=`screen -ls autofan | grep -E "[0-9]+\.autofan" | cut -d. -f1 | awk '{print $1}'`
	if [[ -z $screens ]]; then
		echo "No autofan screens found"
		return 1
	fi
	for pid in $screens; do
		echo "Stopping autofan screen session $pid"
		screen -S $pid -X quit
	done
	return 0
}


function usage() {
	bname=`basename $0`
	echo -e "Usage: ${CYAN}$bname start|stop|restart|log${NOCOLOR}"
	echo -e "If you run ${CYAN}$bname${NOCOLOR} without parameters $bname screen will be tried to resume."
}


function get_log() {
	local log=/tmp/autofan.log
	[[ -f $log ]] && rm $log
	screen -S autofan -X hardcopy $log &&
		#iconv -f ISO-8859-1 -t UTF-8 $log # needed to convert some symbols
		cat -s $log | sed "s/\xB0/°/g; s/\x91/↑/g; s/\x93/↓/g" # needed to convert some symbols
}

case $1 in
	log)
		get_log
	;;

	loop)
		while true; do
			$0 run
			#echo "$(get_log)" | message warn "Autofan restarted after error" payload
			sleep 1
			echo "Restarting..."
		done
	;;

	run)
		check_gpu
		auto_fan_control
	;;

	start|dontattach)
		start
	;;

	stop)
		stop
	;;

	restart)
		stop &&
			sleep 1
		start
	;;

	*)
		screen -x -S autofan
		[[ $? != 0 ]] && usage
	;;

esac
