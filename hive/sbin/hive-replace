#!/usr/bin/env bash

export PATH=/bin:/sbin:/usr/bin:/usr/sbin

SCRIPT_PATH=`dirname $0`
SCRIPT_NAME=`basename $0`
cd $SCRIPT_PATH
mydir=`pwd`
myself="$mydir/$SCRIPT_NAME"

# main url to images repo
HIVE_URL=http://download.hiveos.farm

# direct urls to images
STABLE_URL=$HIVE_URL/latest/
VEGA_URL=$HIVE_URL/vega/
BETA_URL=$HIVE_URL/beta/
URL_MASK="^http.*hiveos-.*\.zip$"

# images archive
ARCHIVE_URL=$HIVE_URL/history/
#ARCHIVE_REGEX="\"\Khiveos-[^\"]+.zip(?=\")"
ARCHIVE_REGEX="(\"|^)\Khiveos-[^\"]+.zip(?=($|\"))"

# download timeout
TIMEOUT=20

TMPDIR="/tmp/tmphive"
md5_url=
url=
root_dev=""
farm_hash=""
farm=""
force=1 # we do not need md5 as archive integrity is checked anyway
no_confirm=0
smb=0
smbuser=
smbpasswd=
nfs=0
thishive=0
[[ $(uname -sr) == *hive* ]] && thishive=1

#Get root
if [[ $(id -u) -ne 0 ]]; then
	echo "Root privileges required"
	sudo chmod +x $0
	exec sudo $myself $*
fi


BLACK='\033[0;30m'
DGRAY='\033[1;30m'
RED='\033[0;31m'
BRED='\033[1;31m'
GREEN='\033[0;32m'
BGREEN='\033[1;32m'
YELLOW='\033[0;33m'
BYELLOW='\033[1;33m'
BLUE='\033[0;34m'
BBLUE='\033[1;34m'
PURPLE='\033[0;35m'
BPURPLE='\033[1;35m'
CYAN='\033[0;36m'
BCYAN='\033[1;36m'
LGRAY='\033[0;37m'
WHITE='\033[1;37m'
NOCOLOR='\033[0m'


function url_decode() {
	echo -e "${1//%/\\x}"
}


function get_image_from_url { # return $url
	local from_url=$( url_decode "$1" )
	local name=$2
	set -o pipefail
	url=`curl --connect-timeout $TIMEOUT --retry 2 -fskL --head -w '%{url_effective}' "$from_url" 2>/dev/null | tail -n 1`
	if [[ $? -eq 0 ]]; then
		[[ "$url" =~ $URL_MASK ]] && return 0
		echo -e "$RED> Got bad url for $name image - $url$NOCOLOR"
		return 1
	fi
	echo -e "$RED> Unable to get url for $name image$NOCOLOR"
	return 2
}


function get_image_from_list {
	[[ -z $1 ]] && URL=$ARCHIVE_URL || URL=$1
	# trailing slash needed
	[[ ! "$URL" =~ /$ ]] && URL+="/"

	echo -e "${CYAN}> Loading Hive OS images list${NOCOLOR}"

	local urls=()
	local desc=()

	# skip for custom repo
	if [[ -z $1 ]]; then
		get_image_from_url $STABLE_URL "Stable" && urls+=("$url") && desc+=("Latest Stable")
		get_image_from_url $BETA_URL "Beta" && urls+=("$url") && desc+=("Latest Beta")
		get_image_from_url $VEGA_URL "Vega" && urls+=("$url") && desc+=("Latest Vega")
	fi

	local list=
	# works for ftp also
	list=`curl -fskL --list --connect-timeout $TIMEOUT --retry 2 "$URL" 2>/dev/null`
	if [[ $? -eq 0 ]]; then
		_IFS=$IFS; IFS=$'\n'
		local arr=(`echo "$list" | grep -oP "$ARCHIVE_REGEX" | sed 's/%40/@/g' | sort -n -r -t "@" -k1`)
		IFS=$_IFS
		for img in "${arr[@]}"; do
			urls+=("$URL$img")
		done
	else
		echo -e "$RED> Unable to load images list from repository$NOCOLOR"
	fi
	[[ ${#urls[@]} -eq 0 ]] && echo -e "${RED}> List is empty. Exiting.$NOCOLOR" && return 1

	# get images description
	local versions=
	# try to get from repo URL if specified
	[[ ! -z $1 ]] && versions=`curl -fsLk --connect-timeout $TIMEOUT --retry 2 "${URL}VERSIONS.txt" 2>/dev/null`
	# try to get from Hive server
	[[ -z $versions ]] && versions=`curl -fsLk --connect-timeout $TIMEOUT --retry 2 "${HIVE_URL}/VERSIONS.txt" 2>/dev/null`
	[[ -z $versions ]] && echo -e "${RED}> Unable to load image descriptions$NOCOLOR"

	local SEP=" 路 "
	local index=0
	echo -e "${YELLOW}> Select version to install:$NOCOLOR"
	printf "%b%2s) %b\n" $WHITE $index "${NOCOLOR}Exit"
	for url in "${urls[@]}"
	do
		ver=`basename "$url" 2>/dev/null`
		info=`grep -A 5 "$ver" <<< "$versions"`
		[[ ! -z ${desc[$index]} ]] && ver+="${SEP}$WHITE${desc[$index]}$NOCOLOR" # desc[] is 0-based
		if [[ ! -z info ]]; then
			[[ "$info" =~ ( [0-9\.]+)-hiveos ]] && ver+="${SEP}${CYAN}K$NOCOLOR${BASH_REMATCH[1]}"
			nvidia=`grep -oP "nvidia[^\s]* \K.*" <<< "$info"` && ver+="${SEP}${GREEN}N$NOCOLOR $nvidia"
			amd=`grep -oP "amd[^\s]* \K.*" <<< "$info"` && ver+="${SEP}${RED}A$NOCOLOR $amd"
			boot=`grep "^Dual" <<< "$info"` && ver+="${SEP}$boot"
		fi
		((index++))
		printf "%b%2s) %b\n" $WHITE $index "$NOCOLOR$ver"
	done

	# allow to select only in interactive shell
	if [[ $(tty) == *tty* || ! -z $DISPLAY ]]; then
		echo -e "${RED}Run this script in interactive shell (local console in not supported) to select image. Exiting.$NOCOLOR"
		exit 0
	fi

	while true;
	do
		read -p "> " REPLY
		[[ "$REPLY" == "0" ]] && return 1
		[[ $REPLY -gt 0 && $REPLY -le ${#urls[@]} ]] && break
		echo -e "${RED}Invalid selection$NOCOLOR"
	done
	((REPLY--))
	url=$( url_decode "${urls[$REPLY]}" )
	return 0
}


function usage {
	echo -e "${CYAN}Usage: hive-replace [option] <Path or URL to ZIP file with Hive OS image>${NOCOLOR}"
	echo -e
	echo -e "Options:"
	echo -e "${GREEN}  -l|--list               ${NOCOLOR}List images from Hive server and select for install"
	echo -e "${GREEN}  -s|--stable             ${NOCOLOR}Download and install latest ${BCYAN}Stable$NOCOLOR image from Hive server"
	echo -e "${GREEN}  --vega                  ${NOCOLOR}Download and install latest ${CYAN}Vega$NOCOLOR image from Hive server"
	echo -e "${GREEN}  --beta                  ${NOCOLOR}Download and install latest ${CYAN}Beta$NOCOLOR image from Hive server"
	echo -e "${GREEN}  --repo=URL              ${NOCOLOR}List images from URL and select for install (HTTP(S)/FTP)"
	echo -e "${GREEN}  -y|--yes                ${NOCOLOR}Do not ask for confirmation, answer yes to all questions"
#	echo -e "${GREEN}  -f|--force              ${NOCOLOR}Forced replace. Do not check the MD5 checksum of ZIP archive"
	echo -e "${GREEN}  --hash=FARM_HASH        ${NOCOLOR}FARM_HASH from Web-interface. Optional for already configured rig"
	echo -e "${GREEN}  --nfs                   ${NOCOLOR}To use NFS Shared resource. e.g.: ${GREEN}IP_NFS_server:/shared_dir/hive_zip${NOCOLOR}"
	echo -e "${GREEN}  --smb                   ${NOCOLOR}To use Windows Shared resource. e.g.: ${GREEN}//IP_Windows_comp/shared_folder/hive_zip${NOCOLOR}"
	echo -e "${GREEN}  --smbuser=Windows user  ${NOCOLOR}UserName for Windows Shared resource. Do not set this option for guest/anonymous access"
	echo -e "${GREEN}  --smbpass=Windows pass  ${NOCOLOR}Password for Windows Shared resource. Do not set this option for guest/anonymous access"
	echo -e "${GREEN}  -h|--help               ${NOCOLOR}Show this message"
	echo -e
	echo -e "Example:"
	echo -e "${GREEN}  hive-replace -y --list${NOCOLOR}"
	echo -e "${GREEN}  hive-replace -y --stable${NOCOLOR}"
	echo -e "${GREEN}  hive-replace -y --hash=46e9602837d0bda99f0 http://mylocalserver/hiveos-0.6-01@181121.zip${NOCOLOR}"
	echo -e "${GREEN}  hive-replace -y --hash=46e9602837d0bda99f0 --nfs 192.168.10.100:/home/john/hive/hiveos-0.6-01@181121.zip${NOCOLOR}"
	echo -e "${GREEN}  hive-replace -y --hash=46e9602837d0bda99f0 --smb --smbuser=winuser --smbpass=secret //192.168.0.1/shared_folder/hiveos-0.6-01@181121.zip${NOCOLOR}"

	exit
}


function check_packages {
	local programs=0
	local need_install=
	
	dpkg -s lsof > /dev/null 2>&1
	[[ $? -ne 0 ]] && programs=1 && need_install="lsof"
	dpkg -s curl > /dev/null 2>&1
	[[ $? -ne 0 ]] && programs=1 && need_install="$need_install curl"
	dpkg -s wget > /dev/null 2>&1
	[[ $? -ne 0 ]] && programs=1 && need_install="$need_install wget"
	dpkg -s unzip > /dev/null 2>&1
	[[ $? -ne 0 ]] && programs=1 && need_install="$need_install unzip"
	dpkg -s gdisk > /dev/null 2>&1
	[[ $? -ne 0 ]] && programs=1 && need_install="$need_install gdisk"
	if [[ smb -eq 1 ]]; then
		dpkg -s smbclient > /dev/null 2>&1
		[[ $? -ne 0 ]] && programs=1 && need_install="$need_install smbclient"
	fi
	if [[ nfs -eq 1 ]]; then
		dpkg -s nfs-common > /dev/null 2>&1
		[[ $? -ne 0 ]] && programs=1 && need_install="$need_install nfs-common"
	fi
	if [[ $programs -ne 0 ]]; then
		echo -e "${CYAN}> Installing required packages${NOCOLOR}"
		apt-get update
		apt-get install -y $need_install
		[[ $? -ne 0 ]] && echo -e "${RED}Failed to install required packages${NOCOLOR}" && exit
		echo -e "${GREEN}> Installed required packages successfully${NOCOLOR}"
	fi
}


# Gets/downloads image
function get {
	cd $TMPDIR
	rm $TMPDIR/*hive* > /dev/null 2>&1

	basename=`basename -s .zip "$url"`
	archname=`basename "$url"`
	
	if [[ $nfs -eq 1 || $smb -eq 1 ]]; then
		[[ ! -d $TMPDIR/share ]] && mkdir $TMPDIR/share
		mnt_flag=1
		mnt_share=1
		cat /proc/mounts | grep $TMPDIR/share > /dev/null 2>&1
		mnt_share=$?
		[[ $mnt_share -eq 0 ]] && mnt_flag=0
		[[ $nfs -eq 1 && $mnt_share -ne 0 ]] && mount -t nfs $(dirname "$url") $TMPDIR/share > /dev/null 2>&1 && mnt_flag=$?
		if [[ $smb -eq 1 && $mnt_share -ne 0 ]]; then
			psw=
			[[ -z $smbuser ]] && smbuser="nobody"
			[[ ! -z $smbpasswd ]] && psw="password=$smbpasswd"
			mount -v -t cifs -o username=$smbuser,$psw,iocharset=utf8,vers=3.0 $(dirname "$url") $TMPDIR/share > /dev/null 2>&1
			mnt_flag=$?
		fi	
		[[ $mnt_flag -ne 0 ]] && echo -e "${RED}小an't mount network shared resource.${NOCOLOR}" && return 1
		url="$TMPDIR/share/$archname"
	fi


	#download VERSIONS.txt to get md5 later
	if [[ $force -ne 1 ]]; then
		#default is "http://download.hiveos.farm/VERSIONS.txt"
		md5_url=$(dirname "$url")/VERSIONS.txt
		#curl -s $md5_url > $TMPDIR/VERSIONS.txt
		wget -q -O $TMPDIR/VERSIONS.txt $md5_url
		[[ $? -ne 0 ]] && echo -e "${RED}小an't get $md5_url to check MD5 checksum. Use -f to ignore this.${NOCOLOR}" && return 1
		mdsum=$(sed -n "/$archname/p" $TMPDIR/VERSIONS.txt | awk '{printf$2}')
		[[ -z $mdsum ]] && echo -e "${RED}小an't get md5sum from $md5_url to check MD5 checksum. Use -f to ignore this.${NOCOLOR}" && return 1
	fi

	#Copy|download hive image to tmmfs
	echo -e "\n${CYAN}> Downloading image file${NOCOLOR}"
	if [[ "$url" == *http* ||  "$url" == *ftp* ]]; then
		echo ""
		wget -t 0 -T $TIMEOUT --show-progress "$url"
		[[ $? -ne 0 ]] && echo -e "${RED}Download Hive OS image failed. Check url${NOCOLOR}" && return 1
	else
		[[ ! -f $url ]] && echo -e "${RED}Hive OS image not found. Check path${NOCOLOR}" && return 1
		cp -v $url $TMPDIR
		[[ $? -ne 0 ]] && echo -e "${RED}Copy Hive OS image failed${NOCOLOR}" && return 1
	fi

	#check md5
	if [[ $force -ne 1 ]]; then
		echo -e "\n${CYAN}> Checking MD5 summ of image file${NOCOLOR}"
		mdsum_hive=$(md5sum $TMPDIR/$archname | awk '{printf$1}')
		[[ $mdsum != $mdsum_hive ]] && echo -e "${RED}MD5 checksum of image file does not match${NOCOLOR}\nGot $mdsum_hive, expected $mdsum" && return 1
	fi

	#check zip integrity
	echo -e "\n${CYAN}> Checking ZIP file integrity${NOCOLOR}"
	unzip -t $TMPDIR/$archname > /dev/null
	[[ $? -ne 0 ]] && echo -e "${RED}ZIP file is damaged${NOCOLOR}" && return 1

	echo -e "${GREEN}Download|copy Hive OS image successful!${NOCOLOR}"
	return 0
}


# Starting actions
function prepare {
	#Prevent start from local console
	[[ $(tty) == *tty* || ! -z $DISPLAY ]] && echo "This script does not work in the local console. Exiting." && exit 1

	mem=$(free -m | awk 'NR == 2{print$2}')
	clear
	echo -e "${CYAN}***********************************${NOCOLOR}"
	echo -e "${YELLOW}    Hive OS Image Installation${NOCOLOR}"
	echo -e "${CYAN}***********************************${NOCOLOR}"
	echo
	echo -e "$WHITE$url$NOCOLOR"
	echo
	echo "Total RAM=$mem Mb"
	echo
	[[ $mem -lt 3600 ]] && echo -e "${YELLOW}4 Gb RAM is required. Exiting.${NOCOLOR}" && exit

	PART_UUID=`cat /proc/cmdline | tr " " "\n" | grep "UUID" | sed 's/\(^root=UUID=\)//'`
	DISK_PART=`blkid | grep -m1 $PART_UUID | awk '{ print $1 }' | sed 's/://' | sed 's/\(^\/dev\/\)//'`
	DISK_NAME=`echo ${DISK_PART} | sed 's/\([[:digit:]]\)//'`
	DISK_SIZE=`cat /proc/partitions | grep -w "${DISK_NAME}" | awk '{ printf("%.f",$3/1024)}'`
	PART_SIZE=`cat /proc/partitions | grep -w "${DISK_PART}" | awk '{ printf("%.f",$3/1024)}'`

	echo -e "Current OS booted from ${GREEN}$DISK_NAME${NOCOLOR} and whole drive size is ${WHITE}$DISK_SIZE${NOCOLOR} Mb"
	[[ $DISK_SIZE -lt 7300 ]] && echo -e "\n${YELLOW}The minimum disk size for Hive OS is 8 Gb${NOCOLOR}" && exit

	if [[ $no_confirm -ne 1 ]]; then
		echo -e "${RED}Warning: After Hive OS installation, all your data on ${GREEN}$DISK_NAME${NOCOLOR} ${RED}will be lost!${NOCOLOR}"
		echo -en "\nType ${GREEN}\"yes\"${NOCOLOR} if you want to install Hive OS on ${GREEN}$DISK_NAME${NOCOLOR}: "
		read answer
		[[ $answer != "yes" ]] && echo -e "${YELLOW}\nBye, bye!${NOCOLOR}" && exit
	fi

	##check programs
	check_packages

	#create tmpfs
	cat /proc/mounts | grep $TMPDIR > /dev/null 2>&1
	if [[ $? -ne 0 ]]; then
		mkdir $TMPDIR > /dev/null 2>&1
		mount none $TMPDIR -t tmpfs -o size=3000m
	fi


	#get farm_hash or old config
	mkdir -p $TMPDIR/old-config
	if [[ $thishive -eq 1 && -f /hive-config/rig.conf ]]; then
		cp /hive-config/rig.conf ${TMPDIR}/old-config/
	else
		echo -e "HIVE_HOST_URL=\"http://api.hiveos.farm\"" > ${TMPDIR}/old-config/rig.conf
		echo -e "FARM_HASH=$farm\n" >> ${TMPDIR}/old-config/rig.conf
	fi
	[[ $thishive -eq 1 && -d /hive-config/network ]] && cp -R /hive-config/network $TMPDIR/old-config/
	[[ $thishive -eq 1 && -d /hive-config/openvpn ]] && cp -R /hive-config/openvpn $TMPDIR/old-config/
	[[ $thishive -eq 1 && -d /hive-config/watchdog ]] && cp -R /hive-config/watchdog $TMPDIR/old-config/


	#get hive zip
	get
	[[ $? -ne 0 ]] && exit

	#Disable kernel message to tty
	echo 0 > /proc/sys/kernel/printk
	echo 1 > /proc/sys/kernel/sysrq
	echo 0 > /proc/sysrq-trigger


	#stop services and remount RO
	swapoff -a
	echo -e "\n${CYAN}> Stopping services${NOCOLOR}"

	if [[ $thishive -eq 1 ]]; then
		####################
		#There must be a watchdog stop
		##################

		autoswitch stop > /dev/null 2>&1
		miner stop > /dev/null 2>&1
		wd stop > /dev/null 2>&1
		autofan stop > /dev/null 2>&1
		systemctl stop hivex > /dev/null 2>&1
		[[ ! -z `pidof xinit` ]] && kill -9 `pidof xinit` > /dev/null 2>&1
	fi

	for SOCKET in \
	`systemctl list-units -t socket | awk '{print $1}' | grep -v -e ssh | grep -v -e openvpn | grep -v -e shellinabox | grep -v -e network | grep -v -e ifup | grep -v -e user-sessions | grep -v -e hive`; \
	do systemctl stop $SOCKET > /dev/null 2>&1 && echo "> stop $SOCKET"; done

	for SERVICE in \
	`systemctl list-units -t service | awk '{print $1}' | grep -v -e ssh | grep -v -e openvpn | grep -v -e shellinabox | grep -v -e network | grep -v -e ifup | grep -v -e user-sessions | grep -v -e hive`; \
	do systemctl stop $SERVICE > /dev/null 2>&1 && echo "> stop $SERVICE"; done
	
	#skip self, telec, hssh, watchdog!
	pid="1"
	while [[ ! -z $pid ]]; do
		pid=$(lsof / | grep -v ' \(mem\|txt\|rtd\|cwd\) ' | grep -v -e $SCRIPT_NAME | grep -v -e telec -e hssh -e watchdog -e hl340 -e srrv2 | sed '2!d' | awk '{print $2}') #'
		[[ -z $pid ]] && continue
		process=$(lsof / | grep -v ' \(mem\|txt\|rtd\|cwd\) ' | grep -v -e $SCRIPT_NAME | grep -v -e telec -e hssh -e watchdog -e hl340 -e srrv2 | sed '2!d' | awk '{print $1}') #'
		echo -e "> kill $process"
		kill $pid
		sleep 1
	done
	

	#Readonly remount
	for MOUNTS in `cat /proc/mounts | grep $DISK_NAME | awk '{print $2}'`; do
		mount -n -o remount,ro $MOUNTS > /dev/null 2>&1;
	done


	#create temp root
	echo -e "\n${CYAN}> Creating temporary root filesystem${NOCOLOR}"
	mkdir -p $TMPDIR/{proc,sys,run,dev,usr,var,oldroot,bin,sbin,lib,tmp,usr/lib,usr/share,usr/lib/x86_64-linux-gnu,lib/lsb}
	cp -aR /{bin,sbin,etc} $TMPDIR > /dev/null 2>&1
	cp -aR /usr/{bin,sbin} $TMPDIR/usr > /dev/null 2>&1
	cp -aR /lib/x86_64-linux-gnu $TMPDIR/lib > /dev/null 2>&1
	cp -aR /lib64 $TMPDIR > /dev/null 2>&1
	cp -aR /usr/lib/sudo $TMPDIR/usr/lib > /dev/null 2>&1
	cp -a /usr/lib/x86_64-linux-gnu/libmpfr* $TMPDIR/usr/lib/x86_64-linux-gnu > /dev/null 2>&1
	cp -a /usr/lib/x86_64-linux-gnu/libsigsegv* $TMPDIR/usr/lib/x86_64-linux-gnu > /dev/null 2>&1
	cp -a /usr/lib/x86_64-linux-gnu/libgmp* $TMPDIR/usr/lib/x86_64-linux-gnu > /dev/null 2>&1
	cp -a /usr/lib/x86_64-linux-gnu/libstdc++* $TMPDIR/usr/lib/x86_64-linux-gnu > /dev/null 2>&1
	cp -a /usr/lib/x86_64-linux-gnu/libpopt.so* $TMPDIR/usr/lib/x86_64-linux-gnu > /dev/null 2>&1
	cp -aR /dev $TMPDIR > /dev/null 2>&1
	cp $myself $TMPDIR > /dev/null 2>&1
	chmod +x $TMPDIR/$SCRIPT_NAME > /dev/null 2>&1
	
	mount --bind /proc $TMPDIR/proc
	mount --bind /sys $TMPDIR/sys
	mount --bind /dev $TMPDIR/dev

	#create conf for second part
	echo "wr=1" > $TMPDIR/replace.conf
	echo "archname=$archname" >> $TMPDIR/replace.conf
	echo "root_dev=$DISK_NAME" >> $TMPDIR/replace.conf
	echo "conf_loop=$conf_loop" >> $TMPDIR/replace.conf


	#chroot to temp root
	mount --bind /proc $TMPDIR/proc
	mount --bind /sys $TMPDIR/sys
	mount --bind /dev $TMPDIR/dev
	sync
	cd $TMPDIR
	exec chroot . /bin/bash /$SCRIPT_NAME
}


# Writing to disk
function write {

	cd /
	[[ -z $archname || ! -f $archname ]] && echo -e "${RED}>HiveOS image not found. Exiting.${NOCOLOR}" && return 1

	echo -e "\n${CYAN}> Writing Hive OS filesystem to $root_dev${NOCOLOR}"
	echo -e "Please wait, this can take long"
	echo -e "To prevent damage to your disk device\ndo not turn off your computer until the end of the process.\n"

	unzip -p $archname | dd of=/dev/$root_dev status=progress bs=20M
	[[ $? -ne 0 ]] && echo -e "Write image failed. Exiting." && return 1
	
	partprobe > /dev/null 2>&1

	#Rewrite config partition
	dd if=/dev/${root_dev}1 of=new_conf.img status=progress

	LOOPDEV=$(losetup --find --show new_conf.img)
	partprobe ${LOOPDEV}
	
	mkdir hive-config
	mount ${LOOPDEV} hive-config
	cp -R old-config/* hive-config
	sync

	dd if=/new_conf.img of=/dev/${root_dev}1 status=progress
	
	#Fix GPT table if needed
	partprobe > /dev/null 2>&1
	sgdisk -e /dev/$root_dev > /dev/null 2>&1
	sgdisk -C /dev/$root_dev > /dev/null 2>&1
			
	#Reboot
	sync

	echo -e
	echo -e "${GREEN}Image writing to ${PURPLE}$root_dev${GREEN} is successfull!${NOCOLOR}"
	echo -e
	echo -e "Your rig is configured and ready to work under Hive OS."
	echo -e "After reboot it should appear on the web."
	echo -e
	echo -e "${GREEN}Have a happy mining!${NOCOLOR}"
	echo -e "${YELLOW}Rebooting in 15 seconds${NOCOLOR}"

	sleep 15

	echo 1 > /proc/sys/kernel/sysrq
	echo b > /proc/sysrq-trigger
	
}



function sel {
	wr=0
	[[ -f "/replace.conf" ]] && source "/replace.conf"

	if [[ $wr -ne 1 ]]; then
		[[ -z $url ]] && echo -e "${YELLOW}Filesystem path or URL to Hive OS image is required.${NOCOLOR}\n" && usage
		prepare
	else
		write
	fi
}


[[ $1 == "-h" || $1 == "--help" ]] && usage

for param in "$@"; do
	case "$param" in
		-f|--force)
			force=1
		;;
		-y|--yes)
			no_confirm=1
		;;
		--nfs)
			nfs=1
		;;
		--smb)
			smb=1
		;;
		--smbuser=*)
			smbuser="${param#*=}"
		;;
		--smbpass=*)
			smbpasswd="${param#*=}"
		;;
		--hash=*)
			farm="${param#*=}"
		;;
		http*//*hive*)
			check_packages
			get_image_from_url "$param" "this" || exit
		;;
		*hive*zip)
			url=$( url_decode "$1" )
		;;
		-l|--list)
			check_packages
			get_image_from_list || exit
		;;
		--repo=*)
			[[ -z ${param#*=} ]] && echo -e "${RED}> Repository URL is required. Exiting.$NOCOLOR" && exit 1
			check_packages
			get_image_from_list "${param#*=}" || exit
		;;
		-s|--stable)
			check_packages
			get_image_from_url $STABLE_URL "Stable" || exit
		;;
		--beta)
			check_packages
			get_image_from_url $BETA_URL "Beta" || exit
		;;
		--vega)
			check_packages
			get_image_from_url $VEGA_URL "Vega" || exit
		;;
		*)
			#none
		;;
	esac
done

[[ $nfs -eq 1 && $smb -eq 1 ]] && echo -e "${YELLOW}Specify only one of the options: ${GREEN}--smb${NOCOLOR} or ${GREEN}--nfs${NOCOLOR}. Both are not allowed${NOCOLOR}\n" && usage
if [[ $nfs -eq 1 || $smb -eq 1 ]]; then
	[[ "$url" == *http* ||  "$url" == *ftp* ]] && echo -e "${YELLOW}--nfs or --smb and http or ftp - incompatible\n" && usage
fi

sel
