#!/usr/bin/env bash

# Sanitize functions to prepare stats values for backend

TEMP_MIN=-100
TEMP_MAX=200
TEMP_FALLBACK_MIN=0
TEMP_FALLBACK_MAX=0

OCTOFAN_TEMP_MIN=-100
OCTOFAN_TEMP_MAX=255
OCTOFAN_VOLTAGE_AC_MIN=0
OCTOFAN_VOLTAGE_AC_MAX=400
OCTOFAN_AMPERAGE_AC_MIN=0
OCTOFAN_AMPERAGE_AC_MAX=22
OCTOFAN_POWER_AC_MIN=0
OCTOFAN_POWER_AC_MAX=5000
OCTOFAN_VOLTAGE_DC_MIN=0
OCTOFAN_VOLTAGE_DC_MAX=40
OCTOFAN_AMPERAGE_DC_MIN=0
OCTOFAN_AMPERAGE_DC_MAX=420
OCTOFAN_POWER_DC_MIN=0
OCTOFAN_POWER_DC_MAX=5000
OCTOFAN_TEMP_FALLBACK_MIN=0
OCTOFAN_TEMP_FALLBACK_MAX=0
OCTOFAN_VOLTAGE_AC_FALLBACK_MIN=0
OCTOFAN_VOLTAGE_AC_FALLBACK_MAX=0
OCTOFAN_AMPERAGE_AC_FALLBACK_MIN=0
OCTOFAN_AMPERAGE_AC_FALLBACK_MAX=0
OCTOFAN_POWER_AC_FALLBACK_MIN=0
OCTOFAN_POWER_AC_FALLBACK_MAX=0
OCTOFAN_VOLTAGE_DC_FALLBACK_MIN=0
OCTOFAN_VOLTAGE_DC_FALLBACK_MAX=0
OCTOFAN_AMPERAGE_DC_FALLBACK_MIN=0
OCTOFAN_AMPERAGE_DC_FALLBACK_MAX=0
OCTOFAN_POWER_DC_FALLBACK_MIN=0
OCTOFAN_POWER_DC_FALLBACK_MAX=0

FAN_MIN=0
FAN_MAX=100
FAN_FALLBACK_MIN=0
FAN_FALLBACK_MAX=100

POWER_MIN=0
POWER_MAX=500
POWER_FALLBACK_MIN=0
POWER_FALLBACK_MAX=0

HASHRATE_MIN=0
HASHRATE_MAX=999999999
HASHRATE_FALLBACK_MIN=0
HASHRATE_FALLBACK_MAX=0

function sanitize_value() {
  local v=$1
  if (( $(echo "$v < $2" | bc -l) )); then
    v=$4
  elif (( $(echo "$v > $3" |bc -l) ));then
    v=$5
  fi
  echo $v
}

sanitize_hash_value() {
  local v=`echo $1 | awk '{ printf "%.8f", $1 }'`
  if (( $(echo "$v > 0.001" | bc -l) )); then
    if (( $(echo "$v < 10000" | bc -l) )); then
      v=`echo $v | awk '{ printf "%.4f", $1 }'`
    else
      v=`echo $v | awk '{ printf "%.0f", $1 }'`
    fi
  fi

  if (( $(echo "$v * $2 < $3" | bc -l) )); then
    echo "$5 * $2" | bc
  elif (( $(echo "$v * $2 > $4" | bc -l) )); then
    echo "$6 * $2" | bc
  else
    echo $v
  fi
}

function sanitize_temp() {
  local t_json=$@
  local s_values=
  local a_values=`echo $t_json | jq -r .[]`
  for i_value in $a_values; do
    [[ ! -z "$s_values" ]] && s_values+=","
    s_values+=`sanitize_value $i_value $TEMP_MIN $TEMP_MAX $TEMP_FALLBACK_MIN $TEMP_FALLBACK_MAX`
  done
  echo "[$s_values]"
}

function sanitize_fan() {
  local t_json=$@
  local s_values=
  local a_values=`echo $t_json | jq -r .[]`
  for i_value in $a_values; do
    [[ ! -z "$s_values" ]] && s_values+=","
    s_values+=`sanitize_value $i_value $FAN_MIN $FAN_MAX $FAN_FALLBACK_MIN $FAN_FALLBACK_MAX`
  done
  echo "[$s_values]"
}

function sanitize_power() {
  local t_json=$@
  local s_values=
  local a_values=`echo $t_json | jq -r .[]`
  for i_value in $a_values; do
    [[ ! -z "$s_values" ]] && s_values+=","
    s_values+=`sanitize_value $i_value $POWER_MIN $POWER_MAX $POWER_FALLBACK_MIN $POWER_FALLBACK_MAX`
  done
  echo "[$s_values]"
}

function sanitize_octofan_temp() {
  local t_json=$@
  local s_values=
  local a_values=`echo $t_json | jq -r .[]`
  for i_value in $a_values; do
    [[ ! -z "$s_values" ]] && s_values+=","
    s_values+=`sanitize_value $(echo $i_value | awk '{ printf "%.1f", $1 }') $OCTOFAN_TEMP_MIN $OCTOFAN_TEMP_MAX $OCTOFAN_TEMP_FALLBACK_MIN $OCTOFAN_TEMP_FALLBACK_MAX`
  done
  echo "[$s_values]"
}

function sanitize_octofan_voltage_ac() {
  local i_value=`sanitize_value $1 $OCTOFAN_VOLTAGE_AC_MIN $OCTOFAN_VOLTAGE_AC_MAX $OCTOFAN_VOLTAGE_AC_FALLBACK_MIN $OCTOFAN_VOLTAGE_AC_FALLBACK_MAX`
  echo $i_value
}

function sanitize_octofan_amperage_ac() {
  local i_value=`sanitize_value $1 $OCTOFAN_AMPERAGE_AC_MIN $OCTOFAN_AMPERAGE_AC_MAX $OCTOFAN_AMPERAGE_AC_FALLBACK_MIN $OCTOFAN_AMPERAGE_AC_FALLBACK_MAX`
  echo $i_value
}

function sanitize_octofan_power_ac() {
  local i_value=`sanitize_value $1 $OCTOFAN_POWER_AC_MIN $OCTOFAN_POWER_AC_MAX $OCTOFAN_POWER_AC_FALLBACK_MIN $OCTOFAN_POWER_AC_FALLBACK_MAX`
  echo $i_value
}

function sanitize_octofan_voltage_dc() {
  local i_value=`sanitize_value $1 $OCTOFAN_VOLTAGE_DC_MIN $OCTOFAN_VOLTAGE_DC_MAX $OCTOFAN_VOLTAGE_DC_FALLBACK_MIN $OCTOFAN_VOLTAGE_DC_FALLBACK_MAX`
  echo $i_value
}

function sanitize_octofan_amperage_dc() {
  local i_value=`sanitize_value $1 $OCTOFAN_AMPERAGE_DC_MIN $OCTOFAN_AMPERAGE_DC_MAX $OCTOFAN_AMPERAGE_DC_FALLBACK_MIN $OCTOFAN_AMPERAGE_DC_FALLBACK_MAX`
  echo $i_value
}

function sanitize_octofan_power_dc() {
  local i_value=`sanitize_value $1 $OCTOFAN_POWER_DC_MIN $OCTOFAN_POWER_DC_MAX $OCTOFAN_POWER_DC_FALLBACK_MIN $OCTOFAN_POWER_DC_FALLBACK_MAX`
  echo $i_value
}

get_hs_multiplier(){
  case $1 in
    "hs" )
      echo 0.001
      ;;
    "mhs" )
      echo 1000
      ;;
    "ghs" )
      echo 1000000
      ;;
    * )
      echo 1
  esac
}

function sanitize_hashrate() {
  local hs_multiplier=`get_hs_multiplier $2`
  local t_json=$1
  local s_values=
  local a_values=`echo $t_json | jq -r .[]`
  for i_value in $a_values; do
    [[ ! -z "$s_values" ]] && s_values+=","
    s_values+=`sanitize_hash_value $i_value $hs_multiplier $HASHRATE_MIN $HASHRATE_MAX $HASHRATE_FALLBACK_MIN $HASHRATE_FALLBACK_MAX`
  done
  echo "[$s_values]"
}

function sanitize_total_hashrate() {
  sanitize_hash_value $1 1 $HASHRATE_MIN $HASHRATE_MAX $HASHRATE_FALLBACK_MIN $HASHRATE_FALLBACK_MAX
}

function sanitize_ar() {
  local t_json=$@
  local s_values=
  local a_values=`echo $t_json | jq -r .[]`
  local i=0
  for i_value in $a_values; do
    [[ ! -z "$s_values" ]] && s_values+=","
    [[ i -ne 3 ]] && s_values+=$i_value || s_values+="\"$i_value\""
    let i++
  done
  echo "[$s_values]"
}

function sanitize_miner_stats() {
  local stats=$@
  local i=0
  local n=''
  local value=

  for (( i = 1; i <= 32; i++ )); do
    [[ $i -eq 1 ]] && n='' || n=$i

    eval 'local value=`echo $stats | jq -r .hs_units$n`'
    if [[ ! -z $value && $value != '[]' && $value != 'null' ]]; then
      hs_units=$value
    else
      hs_units="khs"
    fi

    eval 'local value=`echo $stats | jq .hs$n`'
    if [[ ! -z $value && $value != '[]' && $value != 'null' ]]; then
      value=`sanitize_hashrate "$value" $hs_units`
      value='"hs'$n'":'$value
      stats=`jq -s '.[0] * .[1]' <<< "$stats {$value}"`
    else
      break
    fi

    eval 'local value=`echo $stats | jq -r .total_khs$n`'
    if [[ ! -z $value && $value != '[]' && $value != 'null' ]]; then
      value=`sanitize_total_hashrate $value`
      value='"total_khs'$n'":'$value
      stats=`jq -s '.[0] * .[1]' <<< "$stats {$value}"`
    fi

    eval 'local value=`echo $stats | jq .temp$n`'
    if [[ ! -z $value && $value != '[]' && $value != 'null' ]]; then
      value=`sanitize_temp $value`
      value='"temp'$n'":'$value
      stats=`jq -s '.[0] * .[1]' <<< "$stats {$value}"`
    fi

    eval 'local value=`echo $stats | jq .fan$n`'
    if [[ ! -z $value && $value != '[]' && $value != 'null' ]]; then
      value=`sanitize_fan $value`
      value='"fan'$n'":'$value
      stats=`jq -s '.[0] * .[1]' <<< "$stats {$value}"`
    fi

    eval 'local value=`echo $stats | jq -r .uptime$n`'
    if [[ ! -z $value && $value != '[]' && $value != 'null' ]]; then
      value='"uptime'$n'":'$value
      stats=`jq -s '.[0] * .[1]' <<< "$stats {$value}"`
    fi

    eval 'local value=`echo $stats | jq .ar$n`'
    if [[ ! -z $value && $value != '[]' && $value != 'null' ]]; then
      value=`sanitize_ar $value`
      value='"ar'$n'":'$value
      stats=`jq -s '.[0] * .[1]' <<< "$stats {$value}"`
    fi

  done

  echo $stats
}

function sanitize_fan_controller_stats() {
  local stats=$@
  local value=

  local value=`echo $stats | jq .thermosensors`
  if [[ ! -z $value && $value != '[]' && $value != 'null' ]]; then
    value=`sanitize_temp $value`
    value='"thermosensors":'$value
    stats=`jq -s '.[0] * .[1]' <<< "$stats {$value}"`
  fi

  local value=`echo $stats | jq .casefan`
  if [[ ! -z $value && $value != '[]' && $value != 'null' ]]; then
    value=`sanitize_fan $value`
    value='"casefan":'$value
    stats=`jq -s '.[0] * .[1]' <<< "$stats {$value}"`
  fi

  local value=`echo $stats | jq .psu`
  if [[ ! -z $value && $value != '[]' && $value != 'null' ]]; then
    local voltage_ac=`echo $value | jq -r .voltage_ac`
    if [[ ! -z $voltage_ac && $voltage_ac != '[]' && $voltage_ac != 'null' ]]; then
      voltage_ac='voltage_ac":'`sanitize_octofan_voltage_ac $voltage_ac`', '
    else
      voltage_ac=
    fi
    local amperage_ac=`echo $value | jq -r .amperage_ac`
    if [[ ! -z $amperage_ac && $amperage_ac != '[]' && $amperage_ac != 'null' ]]; then
      amperage_ac='"amperage_ac":'`sanitize_octofan_amperage_ac $amperage_ac`', '
    else
      amperage_ac=
    fi
    local power_ac=`echo $value | jq -r .power_ac`
    if [[ ! -z $power_ac && $power_ac != '[]' && $power_ac != 'null' ]]; then
      power_ac=`sanitize_octofan_power_ac $power_ac`
      power_ac='"power_ac": '$power_ac', '
    else
      power_ac=
    fi
    local voltage_dc=`echo $value | jq -r .voltage_dc`
    if [[ ! -z $voltage_dc && $voltage_dc != '[]' && $voltage_dc != 'null' ]]; then
      voltage_dc='"voltage_dc":'`sanitize_octofan_voltage_dc $voltage_dc`', '
    else
      voltage_dc=
    fi
    local amperage_dc=`echo $value | jq -r .amperage_dc`
    if [[ ! -z $amperage_dc && $amperage_dc != '[]' && $amperage_dc != 'null' ]]; then
      amperage_dc='"amperage_dc":'`sanitize_octofan_amperage_dc $amperage_dc`', '
    else
      amperage_dc=
    fi
    local power_dc=`echo $value | jq -r .power_dc`
    if [[ ! -z $power_dc && $power_dc != '[]' && $power_dc != 'null' ]]; then
      power_dc='"power_dc":'`sanitize_octofan_power_dc $power_dc`', '
    else
      power_dc=
    fi

    value=${voltage_ac}${amperage_ac}${power_ac}${voltage_dc}${amperage_dc}${power_dc}
    value=${value%", "}

    value=`echo '"psu": { '$value' }'`
    stats=`jq -s '.[0] * .[1]' <<< "$stats {$value}"`
  fi

  echo $stats
}

#sanitize_total_hashrate $1
# sanitize_miner_stats $@
#sanitize_miner_stats '{"hs":[8.5,7.4],"hs_units":"hs","temp":["48","53"],"fan":[80,80],"uptime":150399,"ar":["2151","0"],"bus_numbers":[1,2],"algo":"150_5","ver":"1.42"}'
#sanitize_miner_stats '{ "total_khs": "0.143", "hs": [ 0.0715, 0.0715 ], "algo": "randomhash", "temp": [ 44, 44 ], "uptime": 11204, "ar": [ 23, 0, 0 ], "ver": "1.5.1-oldgencpu" }'
#sanitize_fan_controller_stats '{ "casefan": [ 100, 100, 100 ], "thermosensors": [ 16, 24, 1.34648e+2, 849.5 ], "psu": { "power_ac": "17245.0" } }'
# [ "12.0 - ETH", "2", "29858;3;0", "14779;15078", "49763;0;0", "24632;25131", "48;100;56;100", "eu-eth.hiveon.net:4444;dcr.coinmine.pl:2222", "0;0;0;0", "1;2", "0;0", "0;0", "0;0", "0;0", "0;0", "1;2", "sia" ]
# { "total_khs": 26991, "hs": [ 13467, 13524 ], "temp": [ "47", "55" ], "fan": [ "101", "98" ], "uptime": 60, "algo": "ethash", "ar": [ "0", "0", "0", "0;0" ], "ver": "12.0 - ETH", "bus_numbers": [ 1, 2 ], "total_khs2": 44985, "hs2": [ 22445, 22540 ], "algo2": "dcr", "ar2": [ "0", "0", "0", "0;0" ] }
# {"total_khs":26757,"hs":[13245,13511],"temp":[45,53],"fan":[98,100],"uptime":79260,"algo":"ethash","ar":[520,0,0,"0;0"],"ver":"12.0 - ETH","bus_numbers":[1,2],"total_khs2":44594,"hs2":[22075,22519],"algo2":"dcr","ar2":["75","1","0","0;0"]}
