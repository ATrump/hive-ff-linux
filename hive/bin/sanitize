#!/usr/bin/env bash

# Sanitize functions to prepare stats values for backend

FAN_MIN=0
FAN_MAX=100
FAN_FALLBACK_MIN=0
FAN_FALLBACK_MAX=100

POWER_MIN=0
POWER_MAX=999999999
POWER_FALLBACK_MIN=0
POWER_FALLBACK_MAX=0

ENERGY_MIN=0
ENERGY_MAX=999999999
ENERGY_FALLBACK_MIN=0
ENERGY_FALLBACK_MAX=0

function sanitize_value() {
  if [[ $1 == "null" ]]; then
    echo $1
  else
    local v=`echo $1 | awk '{printf "%.8f", $1}'`
    if (( $(echo "$v < $2" | bc -l) )); then
      v=$4
    elif (( $(echo "$v > $3" |bc -l) ));then
      v=$5
    fi
    echo $v
  fi
}

function sanitize_fan_array() {
  local t_json=$@
  local s_values=
  local a_values=`echo $t_json | jq -r .[]`
  for i_value in $a_values; do
    [[ ! -z "$s_values" ]] && s_values+=","
    s_values+=`sanitize_value $i_value $FAN_MIN $FAN_MAX $FAN_FALLBACK_MIN $FAN_FALLBACK_MAX`
  done
  echo "[$s_values]"
}

function sanitize_power_array() {
  local t_json=$@
  local s_values=
  local a_values=`echo $t_json | jq -r .[]`
  for i_value in $a_values; do
    [[ ! -z "$s_values" ]] && s_values+=","
    s_values+=`sanitize_value $i_value $POWER_MIN $POWER_MAX $POWER_FALLBACK_MIN $POWER_FALLBACK_MAX`
  done
  echo "[$s_values]"
}

function sanitize_power () {
  local i_value=`sanitize_value $1 $POWER_MIN $POWER_MAX $POWER_FALLBACK_MIN $POWER_FALLBACK_MAX`
  echo $i_value
}

function sanitize_energy () {
  local i_value=`sanitize_value $1 $ENERGY_MIN $ENERGY_MAX $ENERGY_FALLBACK_MIN $ENERGY_FALLBACK_MAX`
  echo $i_value
}

function sanitize_ff_stats() {
  local stats=$@
  local value=

  value=`echo $stats | jq '.fanflap_stats.fan'`
  if [[ ! -z $value && $value != '[]' && $value != 'null' ]]; then
    value=`sanitize_fan_array $value`
    value='"fanflap_stats":{"fan":'$value'}'
    stats=`jq -s '.[0] * .[1]' <<< "$stats {$value}"`
  fi

  echo $stats
}

function sanitize_pm_stats() {
  local stats=$@
  local value=

  value=`echo $stats | jq .powermeter_stats`
  if [[ ! -z $value && $value != '[]' && $value != 'null' ]]; then
    for i in {1..2}; do
      local power=`echo $value | jq -r .p$i`
      if [[ ! -z $power && $power != '[]' && $power != 'null' ]]; then
        power=`sanitize_power_array $power`
        power='"p'$i'": '$power', '
      else
        power=
      fi
      local power_total=`echo $value | jq -r .powermeter_stats.p${i}_total`
      if [[ ! -z $power_total && $power_total != '[]' && $power_total != 'null' ]]; then
        power_total='"p'$i'_total":'`sanitize_power $power_total`', '
      else
        power_total=
      fi
      local energy_total=`echo $value | jq -r .powermeter_stats.e${i}_total`
      if [[ ! -z $energy_total && $energy_total != '[]' && $energy_total != 'null' ]]; then
        energy_total='"e'$i'_total":'`sanitize_energy $energy_total`', '
      else
        energy_total=
      fi

    local t_value=${power}${power_total}${energy_total}
    t_value=${t_value%", "}
    t_value=`echo '"powermeter_stats": { '$t_value' }'`
    stats=`jq -s '.[0] * .[1]' <<< "$stats {$t_value}"`
    done
  fi

  echo $stats
}

#sanitize_ff_stats '{"fanflap_stats":{"fan":[0,11,22,33,null,55]}}'
#sanitize_pm_stats '{"powermeter_stats":{"p1":[0,111,222],"p1_total":333,"e1_total":54321,"p2":[0,111,222],"p2_total":333,"e2_total":54321}}'
