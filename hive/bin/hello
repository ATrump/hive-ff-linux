#!/usr/bin/env bash

# Sends hello to Hive, receives config files, restarts miner

# retry interval. set to 0 or comment to disable
RETRY_TIME=60

arg_retry=0
arg_check=0
# will need to restart miner after
arg_restartminer=0
# send boot flag with hello message
arg_boot=0

# check for arguments
for var in "$@"; do
    [[ $var == "restartminer" ]] && arg_restartminer=1 && continue
    [[ $var == "boot" ]] && arg_boot=1 && continue
    # used internally
    [[ $var == "retry" ]] && arg_retry=1 && continue
    [[ $var == "check" ]] && arg_check=1 && continue
done
echo 1
echo $RIG_CONF
if [[ -z $RIG_CONF ]]; then #reread env variables as after upgrade this can be empty
echo 2
	source /etc/environment
	export $(cat /etc/environment | grep -vE '^$|^#' | cut -d= -f1) #export all variables from file
fi

HELLO_OK="/tmp/.hive-hello-ok"
[ -f $HELLO_OK ] && rm $HELLO_OK

VPN_INSTALLED="/tmp/.openvpn-installed"
mkdir -p "/hive-config"
mkdir -p "/hive-config/openvpn"

[ -t 1 ] && . colors
[ ! -f $RIG_CONF ] && echo -e "No config $RIG_CONF" && exit 1

. $RIG_CONF

[[ ! -z $PROJECT_HASH ]] && FARM_HASH=$PROJECT_HASH #compat

[[ -z $FARM_HASH && -z $RIG_ID ]] && echo "Please use FARM_HASH or RIG_ID in config" && exit 1
[[ ! -z $RIG_ID  && -z $RIG_PASSWD ]] && echo "No RIG_PASSWD in config" && exit 1
[[ -z $HIVE_HOST_URL ]] && echo "No HIVE_HOST_URL in config" && exit 1


HIVE_URL="$HIVE_HOST_URL/worker/api"

# retry again until success
if [[ $arg_retry == 1 ]]; then
  echo -e "${YELLOW}Will to try again in ${RETRY_TIME}s${NOCOLOR}"
  while true; do
    sleep $RETRY_TIME
    date
    [[ -f $HELLO_OK ]] && exit 0
    # do we need to use boot or restart flags here?
    $0 check
    [[ $? == 0 ]] && exit 0
  done
fi


# Make hello request ================================================================

#boot_time=`TZ='UTC' uptime -s`
boot_time=$(( `date +%s` - `cat /proc/uptime | awk '{printf "%d", $1}'` ))

ips=`hostname -I | sed 's/ /\n/g'`
ips_json=`echo "${ips[@]}" | jq -R . | jq -s -c .`
net_interfaces=`ip -o link | grep -vE 'LOOPBACK|POINTOPOINT|sit0|can0|docker|sonm|ifb' | awk '{  printf "{\"iface\": \"%s\", \"mac\": \"%s\"}\n", substr($2, 1, length($2)-1), $(NF-2)  }' | jq -sc .`
[ -f $VPN_INSTALLED ] && openvpn=1 || openvpn=0
#taken from netconf
lan_addresses=(`ip -o -f inet addr show | grep eth0 | awk '/scope global/ {print $4}'`)
lan_gateway=`ip route | awk '/default/ && /eth0/ { print $3 }' | head -1`
lan_dns=`cat /run/systemd/resolve/resolv.conf | grep -m1 ^nameserver | awk '{print $2}'`
cat /etc/systemd/network/20-ethernet.network | grep -q '^DHCP=yes' && lan_dhcp=1 || lan_dhcp=0
lan_config="{\"dhcp\": $lan_dhcp, \"address\": \"${lan_addresses[@]}\", \"gateway\": \"$lan_gateway\", \"dns\": \"$lan_dns\"}"

mb_manufacturer=`dmidecode | grep -A4 '^Base Board Information' | grep "Manufacturer:" | sed -E 's/\sManufacturer:\s+(.*)/\1/'`
mb_product=`dmidecode | grep -A4 '^Base Board Information' | grep "Product Name:" | sed -E 's/\sProduct Name:\s+(.*)/\1/'`
system_uuid=$(dmidecode -s system-uuid) #same as /sys/class/dmi/id/product_uuid
cpu_model=`lscpu | grep "Model name:" | sed 's/Model name:[ \t]*//g'`
cpu_cores=`lscpu | grep "^CPU(s):" | sed 's/CPU(s):[ \t]*//g'`
aes=`lscpu | grep "^Flags:.*aes" | wc -l`
cpu_id=$(sudo dmidecode -t 4 | grep ID | sed 's/.*ID://;s/ //g')
[[ -e /sys/class/net/eth0/address ]] &&
  first_mac=$(cat /sys/class/net/eth0/address | sed 's/://g') || #on some motherboards eth0 is disabled
  first_mac=$(echo $net_interfaces | jq -r .[0].mac | sed 's/://g') #just grab the first in list

bootpart=`readlink -f /dev/block/$(mountpoint -d /)`
if [[ "$(echo $bootpart | grep -c nvme)" -gt 0 ]]; then
  bootdisk=${bootpart::-2} #cutoff partnumber
else
  bootdisk=${bootpart::-1} #cutoff partnumber
fi
#disk_model=`parted -ml | grep -m1 "$bootdisk:" | awk -F ':' '{print $7 " " $2}'`
disk_info=`parted -ml 2>/dev/null | grep "/dev/"`
# root disk first
disk_model=`grep -m1 "$bootdisk:" <<< "$disk_info" | awk -F ':' '{print $7 " " $2}'`
disk_model+=`grep -v "$bootdisk:" <<< "$disk_info" | awk -F ':' '{print ", " $7 " " $2}'`

kernel=`uname --kernel-release`
amd_version=`dpkg -s amdgpu-pro 2>&1 | grep '^Version: ' | sed 's/Version: //' | awk -F'-' '{print $1}'`
[[ -z $amd_version ]] && amd_version=`dpkg -s amdgpu 2>&1 | grep '^Version: ' | sed 's/Version: //' | awk -F'-' '{print $1}'`
#if there is no driver but only OpenCL
[[ -z $amd_version ]] && amd_version="OpenCL `dpkg -s opencl-amdgpu-pro-icd 2>&1 | grep '^Version: ' | sed 's/Version: //' | awk -F'-' '{print $1}'`"

#System pseudo unique number
uid=$(echo ${system_uuid}-${cpu_id}-${first_mac} | tr '[:upper:]' '[:lower:]' | sha1sum | awk '{print $1}')


version=`dpkg -s hive | grep '^Version: ' | sed 's/Version: //'`
#inrelease_filename=/var/lib/apt/lists/`cat /etc/apt/sources.list.d/hiverepo.list | grep -m1 '^deb http' | awk '{print $2}' | sed 's/http:\/\///g' | sed 's/\//_/g'`InRelease
#packages_hash=
#[[ -e $inrelease_filename ]] &&
#  packages_hash=$(cat $inrelease_filename | grep -m1 -A3 '^SHA1:' | grep 'Packages$' | awk '{print $1}')
[[ -e /hive-config/RepoVer ]] &&
  repover=`cat /hive-config/RepoVer` ||
  repover=0
version="$version@$repover"

#read and trim ref_id
ref_id=
[[ -e $REF_ID ]] && ref_id=`cat $REF_ID`
[[ "$ref_id" =~ ^[[:space:]]*([^[:space:]].*[^[:space:]])[[:space:]]*$ ]] && ref_id=${BASH_REMATCH[1]}

request=$(
jq -n \
--arg uid "$uid" \
--arg rig_id "$RIG_ID" \
--arg passwd "$RIG_PASSWD" \
--arg boot_time "$boot_time" \
--arg boot_event "$arg_boot" \
--argjson ip "$ips_json" \
--argjson net_interfaces "$net_interfaces" \
--argjson lan_config "$lan_config" \
--arg openvpn "$openvpn" \
--arg manufacturer "$mb_manufacturer" --arg product "$mb_product" --arg system_uuid "$system_uuid" \
--arg model "$cpu_model" --arg cores "$cpu_cores" --arg aes "$aes" --arg cpu_id "$cpu_id" \
--arg disk_model "$disk_model" \
--arg kernel "$kernel" \
--arg server_url "$HIVE_HOST_URL" \
--arg version "$version" \
--arg ref_id "$ref_id" \
'{
  "method": "hello", "jsonrpc": "2.0", "id": 0,
  "params": {
    $rig_id, $passwd, $server_url, $uid, $ref_id,
    $boot_time, $boot_event, $ip, $net_interfaces, $openvpn, $lan_config,
    "mb": {$manufacturer, $product, $system_uuid}, "cpu": {$model, $cores, $aes, $cpu_id}, $disk_model,
    $kernel,
    $version
  }
}'
)

#ROH case fan
if [[ `lsusb | grep -c 16c0:05dc` -ge 1 ]]; then
  octofan=`$OCTOFAN get_max_rpm_json`
  if [[ ! -z $octofan && $octofan != '[]' ]]; then
    octofan_json=$(
      jq -n \
      --argjson octofan "$octofan" \
        '{
          "params": {
            $octofan
          }
         }')
    [[ ! -z $octofan_json ]] &&
      request=`echo "$request" "$octofan_json" | jq -s '.[0] * .[1]'`
  fi
fi

[[ ! -z $FARM_HASH ]] &&
  request=`echo "$request" | jq --arg farm_hash "$FARM_HASH" '. * {"params": {$farm_hash}}'`

if [[ ! -z $FARM_HASH && ! -z $WORKER_NAME ]]; then
  request=`echo "$request" | jq --arg worker_name "$WORKER_NAME" '. * {"params": {$worker_name}}'`
elif [[ ! -z $SET_WORKER_NAME ]]; then
  request=`echo "$request" | jq --arg worker_name "$SET_WORKER_NAME" '. * {"params": {$worker_name}}'`
fi


echo "$request" | jq -c --arg pass "${RIG_PASSWD//?/*}" '.params.passwd=$pass'

response=$(echo $request | curl --insecure -L --data @- --connect-timeout 7 --max-time 15 --silent -XPOST "${HIVE_URL}?id_rig=$RIG_ID&method=hello" -H "Content-Type: application/json")
exitcode=$?
if [[ $exitcode -ne 0 ]]; then
  echo -e "${RED}Error connecting to Hive server${NOCOLOR} $HIVE_HOST_URL"
  human-curl-error $exitcode
  [[ ! -z $RETRY_TIME && $RETRY_TIME != 0 && $arg_check == 0 ]] &&
    echo -e "${YELLOW}Will to try again in ${RETRY_TIME}s${NOCOLOR}" &&
    [[ $(screen -ls | grep -c hello) == 0 ]] &&
      screen -dmS hello $0 retry
  exit $exitcode
fi

#output and check json
echo "$response" | jq '.'

[ $? -ne 0 ] && echo -e "${RED}Error parsing JSON response:${NOCOLOR} $response" && exit $? #error json parsing

error=$(echo $response | jq '.error' --raw-output)
if [[ ! -z $error && $error != "null" ]]; then
  echo -e "${RED}ERROR:${NOCOLOR} `echo $response | jq '.error.message' -r`"
  screen -S hello -X quit > /dev/null
  exit 1
fi

# Save config and check it ================================================================
config=$(echo $response | jq '.result.config' --raw-output)
if [[ -z "$config" || "$config" == "null" ]]; then
  echo "Response body: $response"
  echo -e "${RED}ERROR:${NOCOLOR} no config field in response"
  screen -S hello -X quit > /dev/null
  exit 1
fi

# stop screen session if not running from it
[[ $arg_check == 0 ]] && screen -S hello -X quit > /dev/null

echo "$config" > $RIG_CONF

. $RIG_CONF
hostname-check

# Password ================================================================
# SET_RIG_PASS var is from previous rig.conf
[[ $SET_RIG_PASS -eq 1 ]] &&
  (hive-passwd -conf; echo "")

# Timezone ================================================================
[[ ! -z $TIMEZONE ]] &&
  timedatectl set-timezone "$TIMEZONE"

# Locale ================================================================
[[ ! -z $SYSTEM_LANG ]] &&
  locale-setup "$SYSTEM_LANG"

# Octofan config ================================================================
octofan=$(echo $response | jq '.result.octofan' --raw-output)
if [[ ! -z $octofan && $octofan != "null" ]]; then
  if [[ -z $OCTOFAN_CONF ]]; then #reread env variables as after upgrade this can be empty
    source /etc/environment
    export $(cat /etc/environment | grep -vE '^$|^#' | cut -d= -f1) #export all variables from file
  fi
  echo "Saving Octofan config"
  echo "$octofan" > $OCTOFAN_CONF

  $OCTOFAN save_text_to_EEPROM
fi

# Repositpry URLs ==============================================================
HIVEREPO_LIST=/etc/apt/sources.list.d/hiverepo.list
repository_list=$(echo $response | jq '.result.repository_list' --raw-output)
[[ -z $repository_list || $repository_list == "null" ]] &&
  repository_list=$(cat /hive/etc/hiverepo.list)
#remove old symlink
[[ -L $HIVEREPO_LIST ]] && rm $HIVEREPO_LIST

existing_repository_list=
[[ -e $HIVEREPO_LIST ]] && existing_repository_list=$(cat $HIVEREPO_LIST)

if [[ $existing_repository_list != $repository_list ]]; then
  echo "Saving repository URLs"
  echo "$repository_list" > $HIVEREPO_LIST
fi

# #remove ref_id
# [[ -e $REF_ID ]] && rm $REF_ID

# Post actions =================================================================
#restartminer - restart miner on success
#if [[ $arg_restartminer == 1 ]]; then
#  miner restart
#  [[ $WD_ENABLED == 1 ]] &&
#    wd restart
#fi

echo "Touching $HELLO_OK"
touch $HELLO_OK

#Flush buffers if any files changed
sync

exit 0
