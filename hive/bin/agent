#!/usr/bin/env bash
#Send stats, receives commands


INTERVAL=10
LOG="/var/log/hive-agent.log"
LAST_STAT="/run/hive/last_stat.json"

API_TIMEOUT=15 #timeout to wait for miner API response, can take very long time on 13+ gpus


LAST_OK=$(( $(date +%s) - 431700 ))
force_stop=0


LAST_COMMAND=$(( $(date +%s) - 86100 )) #time when the last command from webface was received
CUR_PUSH_INTERVAL=$PUSH_INTERVAL #current push interval
RESPONSE_TIME=300 #timeout in seconds to reduce push interval


[ -t 1 ] && . colors

if [[ $1 != "run" ]]; then
	#$PPID - might be parent screen pid
	screen_count=`screen -ls | grep "\.agent" | grep -v $PPID | wc -l`

	#there will be still 1 process for subshell
	#[[ `ps aux | grep "./agent" | grep -vE "grep|screen|SCREEN|$$" | wc -l` > 1 ]] &&
	[[ $screen_count > 0 ]] &&
		echo -e "${RED}Agent screen is already running${NOCOLOR}\nRun ${CYAN}agent-screen${NOCOLOR} to resume screen" &&
		exit 1

	while true; do
	$0 run
	sleep 1
	echo "Restarting..."
	done
fi

#check curl version and SSl session file
curl --help | grep -q ssl-session-file && [[ ! -z $SSL_SESSION_FILE ]] &&
	ssl_session="--ssl-session-file $SSL_SESSION_FILE" ||
	ssl_session=""

# sanitize functions are used to prepare stats values for backend '
. sanitize

########################################################################################################################

function miner_stats {
	local miner=$1
	local mindex=$2 #empty or 2, 3, 4, ...

	khs=0
	stats=

	local MINER_DIR=/hive/miners/$miner
	if [[ -e $MINER_DIR/h-stats.sh ]]; then
		source $MINER_DIR/h-manifest.conf
		source $MINER_DIR/h-config.sh
		source $MINER_DIR/h-stats.sh
	else
		echo -e "${YELLOW}$MINER_DIR/h-stats.sh does not exist${NOCOLOR}"
		miner="unknown"
		eval "MINER${mindex}=unknown"
	fi


	[[ -z $khs ]] && khs=0
	[[ -z $stats ]] && stats="null"

#	[[ ! -z $mindex ]] &&
#		eval "khs${mindex}"
}

########################################################################################################################

. agent.do_command.sh

########################################################################################################################

function reset_miner_vars() {
	#reset all miner vars
	MINER=
	for i in {2..32}; do
		eval unset MINER$i
	done
}

# Main loop cycle
function loop {
	#In some rare cases he have empty stats array
	DT=432000

	no_link=$(( $(date +%s) - $LAST_OK ))
	if [[ $no_link -gt $DT ]]; then
		miner stop
#		wd stop
		if [[ $force_stop -eq 0 ]]; then
			force_stop=1
			echo "[`date`] No connection with API server. Stop the miner" >> $LOG
		fi
	fi

	#increase current push interval if last command was received more then $RESPONSE_TIME ago
	no_command=$(( $(date +%s) - $LAST_COMMAND ))
	[[ $no_command -gt $RESPONSE_TIME ]] && CUR_PUSH_INTERVAL=$PUSH_INTERVAL #&& echo "CUR_PUSH_INCREASED"
	#but set it back to 0 if there was an error with sending stats to server
	[[ $exitcode -ne 0 || -z $response ]] && CUR_PUSH_INTERVAL=0 && echo #"CUR_PUSH SET TO 0"

	[ ! -f $RIG_CONF ] && echo -e "No config $RIG_CONF" && return

	#each time read config again
	AGENT_GZIP=0
	PUSH_INTERVAL=10
	. $RIG_CONF
	

	# stop using claymore as default
	#[[ -z $MINER ]] && MINER="claymore"

	HIVE_URL="$HIVE_HOST_URL/worker/api"

	date

	# check filesystem status
	if [[ ! -w /tmp ]]; then
		echo "Filesystem is read-only, rebooting"
		sleep 10 # wait. maybe sreboot was called
		mount | message error "Filesystem is read-only, rebooting" payload
		# using reboot as sreboot most probably failed
		reboot
	fi


	request=`jq -c -n --arg rig_id "$RIG_ID" --arg passwd "$RIG_PASSWD" '{ "method": "stats", "params": { "v":1, $rig_id, $passwd }}' 2>/dev/null`
		if [[ $? -ne 0 ]]; then
			echo -e "${RED}Request json creating error${NOCOLOR}"
			return
		fi

	[[ ! -z $META ]] && meta="$META" || meta='null'

	mem=`free -m | grep 'Mem' | awk '{print $2", "$7}'` # total and available
	df=`df -h / | awk '{ print $4 }' | tail -n 1 | sed 's/%//'`
	cpuavg=`cat /proc/loadavg | awk '{print $1", "$2", "$3}'`

	stats_json=$(
		jq -n \
		--argjson meta "$meta" \
		--arg df "$df" \
		--argjson mem "[$mem]" \
		--argjson cpuavg "[$cpuavg]" \
		'{ "params": { $meta, $df, $mem, $cpuavg }}'
		2>/dev/null
	)

	if [[ $? -ne 0 ]]; then
		echo -e "${RED}Stats json creating error${NOCOLOR}"
	else
		json=`echo "$request" "$stats_json" | jq -s -c '.[0] * .[1]' 2>/dev/null` &&
			request="$json" ||
			echo -e "${RED}Stats json parsing error${NOCOLOR}"
	fi


	# Add ROH Fan controller stats to json
	if [[ `lsusb | grep -c 16c0:05dc` -ge 1 ]]; then
		casefan=`$OCTOFAN get_fan_json`
		thermosensors=`$OCTOFAN get_temp_json`
		psu=`$OCTOFAN get_psu_json`
		octofan_stats=$(
			jq -n \
			--argjson casefan "$casefan" \
			--argjson thermosensors $thermosensors \
			--argjson psu $psu \
			'{
				$casefan, $thermosensors, $psu
			}'
			2>/dev/null
		)

		octofan_stats=`sanitize_fan_controller_stats $octofan_stats`
		octofan_stats=$(
			jq -n \
			--argjson octofan_stats "$octofan_stats" \
			'{
				"params": { $octofan_stats }
			}'
			2>/dev/null
		)

		if [[ ! -z $octofan_stats ]]; then
			json=`echo "$request" "$octofan_stats" | jq -s -c '.[0] * .[1]' 2>/dev/null` &&
				request="$json" ||
				echo -e "${RED}Octofan json parsing error${NOCOLOR}"
		fi
	fi

	echo $request > $LAST_STAT

	[[ $AGENT_GZIP == 1 ]] && echo -n  "Z "
	echo $request | jq -c --arg pass "${RIG_PASSWD//?/*}" '.params.passwd=$pass'

	if [[ -z $RIG_ID ]]; then
		echo -e "${YELLOW}No RIG_ID, skipping sending stats${NOCOLOR}"
		return
	fi

	#log request
	#echo "[`date`] > `echo $request | jq '.'`" >> $LOG

	if [[ $AGENT_GZIP == 1 ]]; then
		echo "[`date`] > Z $request" >> $LOG


		response=$(echo $request | gzip -9 -c -f | curl --insecure -L --data-binary @- ${ssl_session} \
		--connect-timeout 7 --max-time 15 --silent \
		-H "Content-Encoding: gzip" \
		-H "Content-Type:" \
		-H "User-Agent:" \
		-H "Accept:" \
		-XPOST "${HIVE_URL}?id_rig=$RIG_ID&method=stats")
	else
		echo "[`date`] > $request" >> $LOG

		response=$(echo $request | curl --insecure -L --data @- ${ssl_session} \
		--connect-timeout 7 --max-time 15 --silent \
		-H "Content-Type:" \
		-H "User-Agent:" \
		-H "Accept:" \
		-XPOST "${HIVE_URL}?id_rig=$RIG_ID&method=stats")
	fi

	exitcode=$?
	if [[ $exitcode -ne 0 || -z $response ]]; then
		echo -e "${RED}Error sending stats${NOCOLOR} $HIVE_HOST_URL" && human-curl-error $exitcode
		echo "[`date`] < ERROR SENDING STATS TO $HIVE_HOST_URL (curl code=$exitcode) \"$response\"" >> $LOG
		return $exitcode
	fi

	#echo $response
	#echo "[`date`] < `echo $response | jq '.' -c`" >> $LOG
	echo "[`date`] < $response" >> $LOG #full response even invalid

	error=$(echo $response | jq '.error' --raw-output)
	[[ $? != 0 ]] && echo -e "${RED}Invalid response${NOCOLOR}: $HIVE_HOST_URL\n$response" && return 1
	[[ ! -z $error && $error != "null" ]] && echo -e "${RED}Error response${NOCOLOR}: $error" && return 1

	LAST_OK=$(date +%s)
	if [[ $force_stop -eq 1 ]]; then
		# always run wd before miner
		wd start
		miner start
		force_stop=0
		echo "[`date`] Connection with API server is OK. Start miner" >> $LOG
	fi

	command=$(echo $response | jq '.result.command' --raw-output)

	if [[ $command != "OK" ]]; then
		echo "$response" | jq '.result'

		#the command has been received, reducing push interval to make the rig more responsive
		CUR_PUSH_INTERVAL=0
		LAST_COMMAND=$(date +%s)
	fi

	if [[ $command != "batch" ]]; then
		body=`echo $response | jq -c '.result'`
		do_command
	else
		count=`echo $response | jq '.result.commands|length'`
		echo "Got $count batch commands"
		for (( i=0; i < $count; i++ )); do
			body=`echo $response | jq -c ".result.commands[$i]"`
			command=
			do_command
		done
	fi

	# ROH Fan controller blink error state
	if [[ `lsusb | grep -c 16c0:05dc` -ge 1 ]]; then
		#update text to OLED screen
		miner_algo=`echo $stats | jq -r '.algo'`
		$OCTOFAN update_text $miner_algo $khs

		error_state=$(echo $response | jq -r '.result.error_state')
		if [[ $error_state == "danger" ]]; then
			$OCTOFAN blink_error
		elif [[ $error_state == "warning" ]]; then
			$OCTOFAN blink_warning
		else
			$OCTOFAN blink_off
		fi
	fi

}


########################################################################################################################

echo -e "\n\n[`date`] Started" >> $LOG

while true; do
#	time_start=`date +%s`
	loop
	sleep 2 #to make sure we will not grab the same gpu-stats file
	continue

	#sleeping is controlled also by agent.gpu-stats now


#	time_finish=`date +%s`
#
#
#	wasted=$(( $time_finish - $time_start ))
#	tosleep=$(( $INTERVAL - $wasted )) #let's wake 2 seconds before the next potential
#
#	#echo ""
#
#	if [[ $tosleep -ge 0 ]]; then
#		echo "Sleeping $tosleep"
#		#sleep $INTERVAL
#		read -t $tosleep
#	else
#		echo -e "${YELLOW}WARNING: Stats collecting time > $INTERVAL seconds, hanging driver?${NOCOLOR}"
#	fi
done
