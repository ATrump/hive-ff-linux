#!/usr/bin/env bash
#Send stats, receives commands


INTERVAL=10
LOG="/var/log/hive-agent.log"
LAST_STAT="/run/hive/last_stat.json"

API_TIMEOUT=15 #timeout to wait for miner API response, can take very long time on 13+ gpus


LAST_OK=$(( $(date +%s) - 431700 ))
force_stop=0


LAST_COMMAND=$(( $(date +%s) - 86100 )) #time when the last command from webface was received
CUR_PUSH_INTERVAL=$PUSH_INTERVAL #current push interval
RESPONSE_TIME=300 #timeout in seconds to reduce push interval


# Waits for new stats to appear in file
function wait-for-pm-stats() {
  #additional timeout to increase push interval
  local max_tries=0
  [[ $CUR_PUSH_INTERVAL -gt 50 ]] && CUR_PUSH_INTERVAL=50
  local tosleep=$(( $CUR_PUSH_INTERVAL - $INTERVAL ))
  if [[ $tosleep -ge 0 ]]; then
    max_tries=$(($tosleep*2))
    for (( i=1; i<=$max_tries; i++)); do
      echo -n '.'
      sleep 0.5
    done
  fi

  local i=
  max_tries=$(($INTERVAL*2*2))
  for (( i=1; i<=$max_tries; i++)); do
    local mtime=`stat -c %Y $FF_PM_OUTPUT 2>/dev/null`
    [[ -z $mtime ]] && mtime=0

    local now=`date +%s`
    local stats_age=$(( $now - $mtime ))

    #echo "stats_age=$stats_age"
    echo -n '.'
    if [[ $stats_age -le 1 ]]; then #gotcha!
      pm_stats=`cat $FF_PM_OUTPUT`
      echo -en " ${GREEN}+"
      return
    elif [[ $i == $max_tries && $stats_age -ge 70 ]]; then #it seems gpu-stats hanged for more than 1.5 minutes
      pm_stats='{}'

      ff-pm-http stop
      sleep 2
      ff-pm-http start

      return
    elif [[ $i == $max_tries ]]; then #&& $stats_age -ge $(($INTERVAL*2))  #too long to wait for it, giving up. taking old value
      pm_stats=`cat $FF_PM_OUTPUT 2>/dev/null`
      echo -en " ${YELLOW}gave up waiting"
      return
    fi

    sleep 0.5
  done
}

[ -t 1 ] && . colors

if [[ $1 != "run" ]]; then
  #$PPID - might be parent screen pid
  screen_count=`screen -ls | grep "\.agent" | grep -v $PPID | wc -l`

  #there will be still 1 process for subshell
  #[[ `ps aux | grep "./agent" | grep -vE "grep|screen|SCREEN|$$" | wc -l` > 1 ]] &&
  [[ $screen_count > 0 ]] &&
    echo -e "${RED}Agent screen is already running${NOCOLOR}\nRun ${CYAN}agent-screen${NOCOLOR} to resume screen" &&
    exit 1

  while true; do
  $0 run
  sleep 1
  echo "Restarting..."
  done
fi

#check curl version and SSl session file
curl --help | grep -q ssl-session-file && [[ ! -z $SSL_SESSION_FILE ]] &&
  ssl_session="--ssl-session-file $SSL_SESSION_FILE" ||
  ssl_session=""

# sanitize functions are used to prepare stats values for backend '
. sanitize

########################################################################################################################

. agent.do_command.sh

########################################################################################################################


# Main loop cycle
function loop {
  #In some rare cases he have empty stats array
  DT=432000

  no_link=$(( $(date +%s) - $LAST_OK ))
  if [[ $no_link -gt $DT ]]; then
    miner stop
#    wd stop
    if [[ $force_stop -eq 0 ]]; then
      force_stop=1
      echo "[`date`] No connection with API server. Stop the miner" >> $LOG
    fi
  fi

  #increase current push interval if last command was received more then $RESPONSE_TIME ago
  no_command=$(( $(date +%s) - $LAST_COMMAND ))
  [[ $no_command -gt $RESPONSE_TIME ]] && CUR_PUSH_INTERVAL=$PUSH_INTERVAL #&& echo "CUR_PUSH_INCREASED"
  #but set it back to 0 if there was an error with sending stats to server
  [[ $exitcode -ne 0 || -z $response ]] && CUR_PUSH_INTERVAL=0 && echo #"CUR_PUSH SET TO 0"

  [ ! -f $RIG_CONF ] && echo -e "No config $RIG_CONF" && return

  #each time read config again
  AGENT_GZIP=0
  PUSH_INTERVAL=10
  . $RIG_CONF


  # stop using claymore as default
  #[[ -z $MINER ]] && MINER="claymore"

  HIVE_URL="$HIVE_HOST_URL/worker/api"

  date

  # check filesystem status
  if [[ ! -w /tmp ]]; then
    echo "Filesystem is read-only, rebooting"
    sleep 10 # wait. maybe sreboot was called
    mount | message error "Filesystem is read-only, rebooting" payload
    # using reboot as sreboot most probably failed
    reboot
  fi


  request=`jq -c -n --arg rig_id "$RIG_ID" --arg passwd "$RIG_PASSWD" '{ "method": "stats", "params": { "v":1, $rig_id, $passwd }}' 2>/dev/null`
    if [[ $? -ne 0 ]]; then
      echo -e "${RED}Request json creating error${NOCOLOR}"
      return
    fi

  [[ ! -z $META ]] && meta="$META" || meta='null'

  mem=`free -m | grep 'Mem' | awk '{print $2", "$7}'` # total and available
  df=`df -h / | awk '{ print $4 }' | tail -n 1 | sed 's/%//'`
  cpuavg=`cat /proc/loadavg | awk '{print $1", "$2", "$3}'`

  stats_json=$(
    jq -n \
    --argjson meta "$meta" \
    --arg df "$df" \
    --argjson mem "[$mem]" \
    --argjson cpuavg "[$cpuavg]" \
    '{ "params": { $meta, $df, $mem, $cpuavg }}'
    2>/dev/null
  )

  if [[ $? -ne 0 ]]; then
    echo -e "${RED}Stats json creating error${NOCOLOR}"
  else
    json=`echo "$request" "$stats_json" | jq -s -c '.[0] * .[1]' 2>/dev/null` &&
      request="$json" ||
      echo -e "${RED}Stats json parsing error${NOCOLOR}"
  fi


  # Add FF controller stats to json
  ff_stats=`ff-control get_fan_json`
  ff_stats=`sanitize_ff_stats $ff_stats`
  ff_stats=$(
    jq -n \
    --argjson params "$ff_stats" \
    '{
      $params
    }'
    2>/dev/null
  )

  if [[ ! -z $ff_stats ]]; then
    json=`echo "$request" "$ff_stats" | jq -s -c '.[0] * .[1]' 2>/dev/null` &&
      request="$json" ||
      echo -e "${RED}FF stats json parsing error${NOCOLOR}"
  fi

  # Add power meter stats to json
  pm_stats=
  wait-for-pm-stats
  #ff_pm="{\"ff_stats\":`cat $FF_PM_OUTPUT`}"

	pm_stats=`jq -n --argjson powermeter_stats "$pm_stats" '{$powermeter_stats}' 2>/dev/null`
  pm_stats=`sanitize_pm_stats $pm_stats`

  pm_stats=$(
    jq -n \
    --argjson params "$pm_stats" \
    '{
      $params
    }'
    2>/dev/null
  )

  if [[ ! -z $pm_stats ]]; then
    json=`echo "$request" "$pm_stats" | jq -s -c '.[0] * .[1]' 2>/dev/null` &&
      request="$json" ||
      echo -e "${RED}FF stats json parsing error${NOCOLOR}"
  fi


  echo $request > $LAST_STAT

  [[ $AGENT_GZIP == 1 ]] && echo -n  "Z "
  echo $request | jq -c --arg pass "${RIG_PASSWD//?/*}" '.params.passwd=$pass'

  if [[ -z $RIG_ID ]]; then
    echo -e "${YELLOW}No RIG_ID, skipping sending stats${NOCOLOR}"
    return
  fi

  #log request
  #echo "[`date`] > `echo $request | jq '.'`" >> $LOG

  if [[ $AGENT_GZIP == 1 ]]; then
    echo "[`date`] > Z $request" >> $LOG


    response=$(echo $request | gzip -9 -c -f | curl --insecure -L --data-binary @- ${ssl_session} \
    --connect-timeout 7 --max-time 15 --silent \
    -H "Content-Encoding: gzip" \
    -H "Content-Type:" \
    -H "User-Agent:" \
    -H "Accept:" \
    -XPOST "${HIVE_URL}?id_rig=$RIG_ID&method=stats")
  else
    echo "[`date`] > $request" >> $LOG

    response=$(echo $request | curl --insecure -L --data @- ${ssl_session} \
    --connect-timeout 7 --max-time 15 --silent \
    -H "Content-Type:" \
    -H "User-Agent:" \
    -H "Accept:" \
    -XPOST "${HIVE_URL}?id_rig=$RIG_ID&method=stats")
  fi

  exitcode=$?
  if [[ $exitcode -ne 0 || -z $response ]]; then
    echo -e "${RED}Error sending stats${NOCOLOR} $HIVE_HOST_URL" && human-curl-error $exitcode
    echo "[`date`] < ERROR SENDING STATS TO $HIVE_HOST_URL (curl code=$exitcode) \"$response\"" >> $LOG
    return $exitcode
  fi

  #echo $response
  #echo "[`date`] < `echo $response | jq '.' -c`" >> $LOG
  echo "[`date`] < $response" >> $LOG #full response even invalid

  error=$(echo $response | jq '.error' --raw-output)
  [[ $? != 0 ]] && echo -e "${RED}Invalid response${NOCOLOR}: $HIVE_HOST_URL\n$response" && return 1
  [[ ! -z $error && $error != "null" ]] && echo -e "${RED}Error response${NOCOLOR}: $error" && return 1

  LAST_OK=$(date +%s)
  if [[ $force_stop -eq 1 ]]; then
    # always run wd before miner
    wd start
    miner start
    force_stop=0
    echo "[`date`] Connection with API server is OK. Start miner" >> $LOG
  fi

  command=$(echo $response | jq '.result.command' --raw-output)

  if [[ $command != "OK" ]]; then
    echo "$response" | jq '.result'

    #the command has been received, reducing push interval to make the rig more responsive
    CUR_PUSH_INTERVAL=0
    LAST_COMMAND=$(date +%s)
  fi

  if [[ $command != "batch" ]]; then
    body=`echo $response | jq -c '.result'`
    do_command
  else
    count=`echo $response | jq '.result.commands|length'`
    echo "Got $count batch commands"
    for (( i=0; i < $count; i++ )); do
      body=`echo $response | jq -c ".result.commands[$i]"`
      command=
      do_command
    done
  fi

}


########################################################################################################################

echo -e "\n\n[`date`] Started" >> $LOG

while true; do
#  time_start=`date +%s`
  loop
  sleep 2 #to make sure we will not grab the same gpu-stats file
  continue

  #sleeping is controlled also by agent.gpu-stats now


#  time_finish=`date +%s`
#
#
#  wasted=$(( $time_finish - $time_start ))
#  tosleep=$(( $INTERVAL - $wasted )) #let's wake 2 seconds before the next potential
#
#  #echo ""
#
#  if [[ $tosleep -ge 0 ]]; then
#    echo "Sleeping $tosleep"
#    #sleep $INTERVAL
#    read -t $tosleep
#  else
#    echo -e "${YELLOW}WARNING: Stats collecting time > $INTERVAL seconds, hanging driver?${NOCOLOR}"
#  fi
done
