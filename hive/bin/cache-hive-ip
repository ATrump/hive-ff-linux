#!/usr/bin/env bash

[ -t 1 ] && . colors

# !!!using only IPv4 addresses and interfaces!!!

# use DNS over HTTPS (only Google and CloudFlare supported)
#use_DoH=("google" "cf")

query_timeout=15

# name servers for queries
dns_srv=("8.8.8.8" "1.1.1.1" "114.114.114.114")

# update servers to cache
upd_srv=("download.hiveos.farm")

# get current hosts
oldhosts=`cat /etc/hosts`
# it always looses last newline
oldhosts+=$'\n'

newhosts="# DO NOT EDIT. All changes will be overwritten by cache-hive-ip
127.0.0.1 localhost
# The following lines are desirable for IPv6 capable hosts
::1 localhost ip6-localhost ip6-loopback
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
"

skip_local_dns=0


function dns_servers {
	if [[ $skip_local_dns -ne 1 ]]; then
		# get system dns servers
		local dns=(`cat /run/systemd/resolve/resolv.conf | grep ^nameserver | awk '{print $2}'`)
		# merge all servers
		dns+=("${dns_srv[@]}")
	else
		local dns=("${dns_srv[@]}")
	fi
	query_servers=
	local dns_servers=()
	# remove duplicates, empty and localhost
	for addr in "${dns[@]}"
	do
		[[ $addr =~ ^127\.0\.0\.[0-9]+$ || ! $addr =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ || " ${dns_servers[@]} " =~ " $addr " ]] &&
			continue
		dns_servers+=($addr)
		query_servers+=" @$addr"
	done
	echo -e $CYAN"> Using DNS servers: ${YELLOW}${dns_servers[@]}"$NOCOLOR
}


function check_host {
	# checking only first address!

	[[ ! $1 =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]] &&
		echo -e $RED" - $1 - IP address has incorrect format"$NOCOLOR &&
		return 1

	[[ $1 =~ ^127\. || $1 =~ ^192\.168\. || $1 =~ ^10\. || $1 =~ ^169\.254\. ]] &&
		echo -e $RED" - $1 - IP address has local/reserved address range"$NOCOLOR &&
		return 2

	[[ -z $local_gws ]] && local_gws=(`ip route | grep "via" | awk '{print $3}'`)
	[[ " ${local_gws[@]} " =~ " $1 " ]] &&
		echo -e $RED" $1 - IP address of gateway"$NOCOLOR &&
		return 3

	echo -e $GREEN" - $@"$NOCOLOR
	return 0
}


function resolve_DoH { # @url, @mode [ cf | google(default) ]
	echo -en $CYAN"> Resolving: ${WHITE}$1"$NOCOLOR
	local query=
	if [[ "$2" == "cf" ]]; then
		echo -en " ${YELLOW}[CloudFlare DoH]"$NOCOLOR
		query=`curl -L --connect-timeout $query_timeout --max-time $query_timeout --silent --resolve "cloudflare-dns.com:443:1.1.1.1" "https://cloudflare-dns.com/dns-query?ct=application/dns-json&name=$1&type=A" 2>/dev/null`
	else
		echo -en " ${YELLOW}[Google DoH]"$NOCOLOR
		query=`curl -L --connect-timeout $query_timeout --max-time $query_timeout --silent --resolve "dns.google:443:8.8.8.8" "https://dns.google/resolve?name=$1&type=A" 2>/dev/null`
	fi
	if [[ $? -eq 0 ]]; then
		#echo "$query" | jq  .
		jqs='if .Status != 0 then empty else .Answer[] | if .type != 1 then empty else .data end end'
		resolve=(`jq -c -r "$jqs" <<< "$query" 2>/dev/null`)
		if [[ $? -eq 0 && ! -z $resolve ]]; then
			check_host "${resolve[@]}"
			return
		fi
	fi
	echo -e $RED" - FAILED"$NOCOLOR
	return 1
}


function resolve_host {
	for doh in "${use_DoH[@]}"; do
		resolve_DoH "$1" "$doh" && return 0
	done
	# prepare dns servers array for query
	[[ -z $query_servers ]] && dns_servers
	# using dig to query multiple dns servers at once
	for try in {1..2}; do
		echo -en $CYAN"> Resolving: ${WHITE}$1"$NOCOLOR
		resolve=(`dig -4 +noall +answer +retry=0 +time=$query_timeout $query_servers $1 | grep -oP ".*\sA\s\K[^\s]+$"`)
		if [[ $? -eq 0 ]]; then
			check_host "${resolve[@]}" && return 0
		else
			echo -e $RED" - FAILED"$NOCOLOR
			break
		fi
		# trying again without local dns
		[[ $skip_local_dns -eq 1 ]] && break
		skip_local_dns=1
		dns_servers
	done
	return 1
}


function add_host {
	resolve_host $1 || return 4
	# adding only first address
	local addr=${resolve[0]}
	[[ -z $addr ]] && return 4

	# IPv4 only!
	if [[ $addr =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
		echo -e $GREEN"> Adding to cache ${NOCOLOR}\"$addr $1\""
		newhosts+="$addr $1"$'\n'
		return 0
	fi

	echo -e $RED"> Unable to extract IP address: ${WHITE}$addr"$NOCOLOR
	return 5
}


function update_hosts {
	[ ! -e $RIG_CONF ] && echo "> No $RIG_CONF" && return 1
	. $RIG_CONF
	[[ -z $HIVE_HOST_URL ]] && echo "> HIVE_HOST_URL is empty" && return 2
	local HOST=`echo $HIVE_HOST_URL | awk -F'://' '{print $2}'`
	[[ -z $HOST ]] && echo "> Unable to parse host name: $HIVE_HOST_URL" && return 3

	# add rig host
	# not using hostname-check here as it directly writes to /etc/hosts
	[[ ! -z $WORKER_NAME ]] && hostname=$WORKER_NAME || hostname=worker #fallback hostname
	[[ $hostname =~ ^([0-9]+).* ]] && hostname="hive$WORKER_NAME" #echo "${BASH_REMATCH[1]}"
	newhosts+=$'\n'"# WORKER NAME"$'\n'"127.0.0.1 $hostname"$'\n'

	newhosts+=$'\n'"# HIVEOS CACHE BEGIN"$'\n'

	# add Hive API host and exit on error
	add_host $HOST || return $?

	local code=0
	# add update hosts
	for host in "${upd_srv[@]}"
	do
		add_host $host || code=$?
	done
	return $code
}

exitcode=0

if [[ $1 != "resetonly" ]]; then
	#[[ $(networkctl list | grep -c routable) -eq 0 ]] && echo "> No connection to network" && exit 10
	update_hosts
	exitcode=$?
fi

# update only if needed
if [[ "$oldhosts" != "$newhosts" ]]; then
	echo "$newhosts" > /etc/hosts
	echo -e $GREEN"> Hosts update done"$NOCOLOR
	sync
else
	echo -e $GREEN"> Hosts is up to date"$NOCOLOR
fi

exit $exitcode
